
login_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00003c68  00003cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800160  00800160  00003dfc  2**0
                  ALLOC
  3 .stab         00002cc4  00000000  00000000  00003dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d96  00000000  00000000  00006ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000974f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 13 	call	0x266c	; 0x266c <main>
      8a:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e0       	ldi	r26, 0x07	; 7
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidInit>:
#include "CLCD_extrachar.h"
#include <util/delay.h>


void CLCD_voidInit(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 54       	subi	r28, 0x46	; 70
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 5b       	subi	r30, 0xBD	; 189
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a4 e3       	ldi	r26, 0x34	; 52
     b6c:	b2 e4       	ldi	r27, 0x42	; 66
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	8e 01       	movw	r16, r28
     b78:	01 5c       	subi	r16, 0xC1	; 193
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	ed 5b       	subi	r30, 0xBD	; 189
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba4:	fe 01       	movw	r30, r28
     ba6:	ff 96       	adiw	r30, 0x3f	; 63
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <CLCD_voidInit+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e af       	std	Y+62, r25	; 0x3e
     bc6:	8d af       	std	Y+61, r24	; 0x3d
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
     bca:	fe 01       	movw	r30, r28
     bcc:	ff 96       	adiw	r30, 0x3f	; 63
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	64 f5       	brge	.+88     	; 0xc3e <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	fe 01       	movw	r30, r28
     be8:	ed 5b       	subi	r30, 0xBD	; 189
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidInit+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c af       	std	Y+60, r25	; 0x3c
     c1c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c20:	9c ad       	ldd	r25, Y+60	; 0x3c
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidInit+0xdc>
     c26:	9c af       	std	Y+60, r25	; 0x3c
     c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e af       	std	Y+62, r25	; 0x3e
     c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d ad       	ldd	r24, Y+61	; 0x3d
     c36:	9e ad       	ldd	r25, Y+62	; 0x3e
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidInit+0xd0>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	fe 01       	movw	r30, r28
     c40:	ff 96       	adiw	r30, 0x3f	; 63
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e af       	std	Y+62, r25	; 0x3e
     c54:	8d af       	std	Y+61, r24	; 0x3d
     c56:	8d ad       	ldd	r24, Y+61	; 0x3d
     c58:	9e ad       	ldd	r25, Y+62	; 0x3e
     c5a:	9a af       	std	Y+58, r25	; 0x3a
     c5c:	89 af       	std	Y+57, r24	; 0x39
     c5e:	89 ad       	ldd	r24, Y+57	; 0x39
     c60:	9a ad       	ldd	r25, Y+58	; 0x3a
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <CLCD_voidInit+0x11c>
     c66:	9a af       	std	Y+58, r25	; 0x3a
     c68:	89 af       	std	Y+57, r24	; 0x39
//#if CLCD_MODE==8
	_delay_ms(45);
	DIO_voidSetPortDirection(CLCD_DATA_PORT,PORT_DIR_OUTPUT);
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RS,PIN_DIR_OUTPUT);
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RW,PIN_DIR_OUTPUT);
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_EN,PIN_DIR_OUTPUT);
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>

	//to return the cursor to his first pos in first line
	CLCD_voidSendCommand(Lcd_Home);
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e8       	ldi	r26, 0x80	; 128
     c9c:	bf e3       	ldi	r27, 0x3F	; 63
     c9e:	8d ab       	std	Y+53, r24	; 0x35
     ca0:	9e ab       	std	Y+54, r25	; 0x36
     ca2:	af ab       	std	Y+55, r26	; 0x37
     ca4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	6d a9       	ldd	r22, Y+53	; 0x35
     ca8:	7e a9       	ldd	r23, Y+54	; 0x36
     caa:	8f a9       	ldd	r24, Y+55	; 0x37
     cac:	98 ad       	ldd	r25, Y+56	; 0x38
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a ef       	ldi	r20, 0xFA	; 250
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	89 ab       	std	Y+49, r24	; 0x31
     cc0:	9a ab       	std	Y+50, r25	; 0x32
     cc2:	ab ab       	std	Y+51, r26	; 0x33
     cc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cc6:	69 a9       	ldd	r22, Y+49	; 0x31
     cc8:	7a a9       	ldd	r23, Y+50	; 0x32
     cca:	8b a9       	ldd	r24, Y+51	; 0x33
     ccc:	9c a9       	ldd	r25, Y+52	; 0x34
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <CLCD_voidInit+0x1a2>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	98 ab       	std	Y+48, r25	; 0x30
     ce4:	8f a7       	std	Y+47, r24	; 0x2f
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
     ce8:	69 a9       	ldd	r22, Y+49	; 0x31
     cea:	7a a9       	ldd	r23, Y+50	; 0x32
     cec:	8b a9       	ldd	r24, Y+51	; 0x33
     cee:	9c a9       	ldd	r25, Y+52	; 0x34
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	6d a9       	ldd	r22, Y+53	; 0x35
     d02:	7e a9       	ldd	r23, Y+54	; 0x36
     d04:	8f a9       	ldd	r24, Y+55	; 0x37
     d06:	98 ad       	ldd	r25, Y+56	; 0x38
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	98 ab       	std	Y+48, r25	; 0x30
     d26:	8f a7       	std	Y+47, r24	; 0x2f
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <CLCD_voidInit+0x202>
     d2a:	88 ec       	ldi	r24, 0xC8	; 200
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9e a7       	std	Y+46, r25	; 0x2e
     d30:	8d a7       	std	Y+45, r24	; 0x2d
     d32:	8d a5       	ldd	r24, Y+45	; 0x2d
     d34:	9e a5       	ldd	r25, Y+46	; 0x2e
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <CLCD_voidInit+0x1f0>
     d3a:	9e a7       	std	Y+46, r25	; 0x2e
     d3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d40:	98 a9       	ldd	r25, Y+48	; 0x30
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	98 ab       	std	Y+48, r25	; 0x30
     d46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4a:	98 a9       	ldd	r25, Y+48	; 0x30
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <CLCD_voidInit+0x1e4>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	69 a9       	ldd	r22, Y+49	; 0x31
     d54:	7a a9       	ldd	r23, Y+50	; 0x32
     d56:	8b a9       	ldd	r24, Y+51	; 0x33
     d58:	9c a9       	ldd	r25, Y+52	; 0x34
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	98 ab       	std	Y+48, r25	; 0x30
     d64:	8f a7       	std	Y+47, r24	; 0x2f
     d66:	8f a5       	ldd	r24, Y+47	; 0x2f
     d68:	98 a9       	ldd	r25, Y+48	; 0x30
     d6a:	9c a7       	std	Y+44, r25	; 0x2c
     d6c:	8b a7       	std	Y+43, r24	; 0x2b
     d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d70:	9c a5       	ldd	r25, Y+44	; 0x2c
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <CLCD_voidInit+0x22c>
     d76:	9c a7       	std	Y+44, r25	; 0x2c
     d78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	CLCD_voidSendCommand(EIGHT_BITS);
     d7a:	88 e3       	ldi	r24, 0x38	; 56
     d7c:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a0 e8       	ldi	r26, 0x80	; 128
     d86:	bf e3       	ldi	r27, 0x3F	; 63
     d88:	8f a3       	std	Y+39, r24	; 0x27
     d8a:	98 a7       	std	Y+40, r25	; 0x28
     d8c:	a9 a7       	std	Y+41, r26	; 0x29
     d8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d90:	6f a1       	ldd	r22, Y+39	; 0x27
     d92:	78 a5       	ldd	r23, Y+40	; 0x28
     d94:	89 a5       	ldd	r24, Y+41	; 0x29
     d96:	9a a5       	ldd	r25, Y+42	; 0x2a
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	4a ef       	ldi	r20, 0xFA	; 250
     d9e:	54 e4       	ldi	r21, 0x44	; 68
     da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	8b a3       	std	Y+35, r24	; 0x23
     daa:	9c a3       	std	Y+36, r25	; 0x24
     dac:	ad a3       	std	Y+37, r26	; 0x25
     dae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     db0:	6b a1       	ldd	r22, Y+35	; 0x23
     db2:	7c a1       	ldd	r23, Y+36	; 0x24
     db4:	8d a1       	ldd	r24, Y+37	; 0x25
     db6:	9e a1       	ldd	r25, Y+38	; 0x26
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <CLCD_voidInit+0x28c>
		__ticks = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9a a3       	std	Y+34, r25	; 0x22
     dce:	89 a3       	std	Y+33, r24	; 0x21
     dd0:	3f c0       	rjmp	.+126    	; 0xe50 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
     dd2:	6b a1       	ldd	r22, Y+35	; 0x23
     dd4:	7c a1       	ldd	r23, Y+36	; 0x24
     dd6:	8d a1       	ldd	r24, Y+37	; 0x25
     dd8:	9e a1       	ldd	r25, Y+38	; 0x26
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	3f ef       	ldi	r19, 0xFF	; 255
     dde:	4f e7       	ldi	r20, 0x7F	; 127
     de0:	57 e4       	ldi	r21, 0x47	; 71
     de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de6:	18 16       	cp	r1, r24
     de8:	4c f5       	brge	.+82     	; 0xe3c <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dea:	6f a1       	ldd	r22, Y+39	; 0x27
     dec:	78 a5       	ldd	r23, Y+40	; 0x28
     dee:	89 a5       	ldd	r24, Y+41	; 0x29
     df0:	9a a5       	ldd	r25, Y+42	; 0x2a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e2       	ldi	r20, 0x20	; 32
     df8:	51 e4       	ldi	r21, 0x41	; 65
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9a a3       	std	Y+34, r25	; 0x22
     e10:	89 a3       	std	Y+33, r24	; 0x21
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <CLCD_voidInit+0x2ec>
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 a3       	std	Y+32, r25	; 0x20
     e1a:	8f 8f       	std	Y+31, r24	; 0x1f
     e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e1e:	98 a1       	ldd	r25, Y+32	; 0x20
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_voidInit+0x2da>
     e24:	98 a3       	std	Y+32, r25	; 0x20
     e26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e28:	89 a1       	ldd	r24, Y+33	; 0x21
     e2a:	9a a1       	ldd	r25, Y+34	; 0x22
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	9a a3       	std	Y+34, r25	; 0x22
     e30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	89 a1       	ldd	r24, Y+33	; 0x21
     e34:	9a a1       	ldd	r25, Y+34	; 0x22
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	69 f7       	brne	.-38     	; 0xe14 <CLCD_voidInit+0x2ce>
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3c:	6b a1       	ldd	r22, Y+35	; 0x23
     e3e:	7c a1       	ldd	r23, Y+36	; 0x24
     e40:	8d a1       	ldd	r24, Y+37	; 0x25
     e42:	9e a1       	ldd	r25, Y+38	; 0x26
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9a a3       	std	Y+34, r25	; 0x22
     e4e:	89 a3       	std	Y+33, r24	; 0x21
     e50:	89 a1       	ldd	r24, Y+33	; 0x21
     e52:	9a a1       	ldd	r25, Y+34	; 0x22
     e54:	9e 8f       	std	Y+30, r25	; 0x1e
     e56:	8d 8f       	std	Y+29, r24	; 0x1d
     e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <CLCD_voidInit+0x316>
     e60:	9e 8f       	std	Y+30, r25	; 0x1e
     e62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	CLCD_voidSendCommand(Lcd_DisplayOn_CursorOff);
     e64:	8c e0       	ldi	r24, 0x0C	; 12
     e66:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	bf e3       	ldi	r27, 0x3F	; 63
     e72:	89 8f       	std	Y+25, r24	; 0x19
     e74:	9a 8f       	std	Y+26, r25	; 0x1a
     e76:	ab 8f       	std	Y+27, r26	; 0x1b
     e78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	69 8d       	ldd	r22, Y+25	; 0x19
     e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8d 8b       	std	Y+21, r24	; 0x15
     e94:	9e 8b       	std	Y+22, r25	; 0x16
     e96:	af 8b       	std	Y+23, r26	; 0x17
     e98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e9a:	6d 89       	ldd	r22, Y+21	; 0x15
     e9c:	7e 89       	ldd	r23, Y+22	; 0x16
     e9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ea0:	98 8d       	ldd	r25, Y+24	; 0x18
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <CLCD_voidInit+0x376>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 8b       	std	Y+20, r25	; 0x14
     eb8:	8b 8b       	std	Y+19, r24	; 0x13
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
     ebc:	6d 89       	ldd	r22, Y+21	; 0x15
     ebe:	7e 89       	ldd	r23, Y+22	; 0x16
     ec0:	8f 89       	ldd	r24, Y+23	; 0x17
     ec2:	98 8d       	ldd	r25, Y+24	; 0x18
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	69 8d       	ldd	r22, Y+25	; 0x19
     ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9c 8b       	std	Y+20, r25	; 0x14
     efa:	8b 8b       	std	Y+19, r24	; 0x13
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <CLCD_voidInit+0x3d6>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9a 8b       	std	Y+18, r25	; 0x12
     f04:	89 8b       	std	Y+17, r24	; 0x11
     f06:	89 89       	ldd	r24, Y+17	; 0x11
     f08:	9a 89       	ldd	r25, Y+18	; 0x12
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <CLCD_voidInit+0x3c4>
     f0e:	9a 8b       	std	Y+18, r25	; 0x12
     f10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9c 8b       	std	Y+20, r25	; 0x14
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	9c 89       	ldd	r25, Y+20	; 0x14
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <CLCD_voidInit+0x3b8>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6d 89       	ldd	r22, Y+21	; 0x15
     f28:	7e 89       	ldd	r23, Y+22	; 0x16
     f2a:	8f 89       	ldd	r24, Y+23	; 0x17
     f2c:	98 8d       	ldd	r25, Y+24	; 0x18
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	98 8b       	std	Y+16, r25	; 0x10
     f40:	8f 87       	std	Y+15, r24	; 0x0f
     f42:	8f 85       	ldd	r24, Y+15	; 0x0f
     f44:	98 89       	ldd	r25, Y+16	; 0x10
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <CLCD_voidInit+0x400>
     f4a:	98 8b       	std	Y+16, r25	; 0x10
     f4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	CLCD_voidClearScreen();
     f4e:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>

	CLCD_voidSendCommand(Lcd_EntryMode);
     f52:	86 e0       	ldi	r24, 0x06	; 6
     f54:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e8       	ldi	r26, 0x80	; 128
     f5e:	bf e3       	ldi	r27, 0x3F	; 63
     f60:	8b 87       	std	Y+11, r24	; 0x0b
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	ad 87       	std	Y+13, r26	; 0x0d
     f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8f 83       	std	Y+7, r24	; 0x07
     f82:	98 87       	std	Y+8, r25	; 0x08
     f84:	a9 87       	std	Y+9, r26	; 0x09
     f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <CLCD_voidInit+0x464>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	0f c0       	rjmp	.+30     	; 0x100a <CLCD_voidInit+0x4c4>
     fec:	88 ec       	ldi	r24, 0xC8	; 200
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <CLCD_voidInit+0x4b2>
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <CLCD_voidInit+0x4a6>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <CLCD_voidInit+0x4ee>
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01

//#elif CLCD_MODE==4
//#endif


}
    103c:	ca 5b       	subi	r28, 0xBA	; 186
    103e:	df 4f       	sbci	r29, 0xFF	; 255
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <CLCD_voidSendData>:



void CLCD_voidSendData(u8 Copy_u8Data)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2f 97       	sbiw	r28, 0x0f	; 15
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	8f 87       	std	Y+15, r24	; 0x0f

//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	6f 85       	ldd	r22, Y+15	; 0x0f
    106e:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_HIGH);
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	61 e0       	ldi	r22, 0x01	; 1
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    1086:	0e 94 26 0a 	call	0x144c	; 0x144c <CLCD_voidSendFallingEdge>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e8       	ldi	r26, 0x80	; 128
    1090:	bf e3       	ldi	r27, 0x3F	; 63
    1092:	8b 87       	std	Y+11, r24	; 0x0b
    1094:	9c 87       	std	Y+12, r25	; 0x0c
    1096:	ad 87       	std	Y+13, r26	; 0x0d
    1098:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109a:	6b 85       	ldd	r22, Y+11	; 0x0b
    109c:	7c 85       	ldd	r23, Y+12	; 0x0c
    109e:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4a ef       	ldi	r20, 0xFA	; 250
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8f 83       	std	Y+7, r24	; 0x07
    10b4:	98 87       	std	Y+8, r25	; 0x08
    10b6:	a9 87       	std	Y+9, r26	; 0x09
    10b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5f e3       	ldi	r21, 0x3F	; 63
    10ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	2c f4       	brge	.+10     	; 0x10dc <CLCD_voidSendData+0x88>
		__ticks = 1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
    10da:	3f c0       	rjmp	.+126    	; 0x115a <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    10dc:	6f 81       	ldd	r22, Y+7	; 0x07
    10de:	78 85       	ldd	r23, Y+8	; 0x08
    10e0:	89 85       	ldd	r24, Y+9	; 0x09
    10e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	3f ef       	ldi	r19, 0xFF	; 255
    10e8:	4f e7       	ldi	r20, 0x7F	; 127
    10ea:	57 e4       	ldi	r21, 0x47	; 71
    10ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f0:	18 16       	cp	r1, r24
    10f2:	4c f5       	brge	.+82     	; 0x1146 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e2       	ldi	r20, 0x20	; 32
    1102:	51 e4       	ldi	r21, 0x41	; 65
    1104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	0f c0       	rjmp	.+30     	; 0x113c <CLCD_voidSendData+0xe8>
    111e:	88 ec       	ldi	r24, 0xC8	; 200
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9c 83       	std	Y+4, r25	; 0x04
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <CLCD_voidSendData+0xd6>
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	69 f7       	brne	.-38     	; 0x111e <CLCD_voidSendData+0xca>
    1144:	14 c0       	rjmp	.+40     	; 0x116e <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1146:	6f 81       	ldd	r22, Y+7	; 0x07
    1148:	78 85       	ldd	r23, Y+8	; 0x08
    114a:	89 85       	ldd	r24, Y+9	; 0x09
    114c:	9a 85       	ldd	r25, Y+10	; 0x0a
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <CLCD_voidSendData+0x112>
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
//#endif
_delay_ms(1);



}
    116e:	2f 96       	adiw	r28, 0x0f	; 15
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <CLCD_voidSendCommand>:



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	2f 97       	sbiw	r28, 0x0f	; 15
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	8f 87       	std	Y+15, r24	; 0x0f
//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	6f 85       	ldd	r22, Y+15	; 0x0f
    119a:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_LOW);
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    11b2:	0e 94 26 0a 	call	0x144c	; 0x144c <CLCD_voidSendFallingEdge>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a0 e8       	ldi	r26, 0x80	; 128
    11bc:	bf e3       	ldi	r27, 0x3F	; 63
    11be:	8b 87       	std	Y+11, r24	; 0x0b
    11c0:	9c 87       	std	Y+12, r25	; 0x0c
    11c2:	ad 87       	std	Y+13, r26	; 0x0d
    11c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    11cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	4a ef       	ldi	r20, 0xFA	; 250
    11d4:	54 e4       	ldi	r21, 0x44	; 68
    11d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	8f 83       	std	Y+7, r24	; 0x07
    11e0:	98 87       	std	Y+8, r25	; 0x08
    11e2:	a9 87       	std	Y+9, r26	; 0x09
    11e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	78 85       	ldd	r23, Y+8	; 0x08
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e8       	ldi	r20, 0x80	; 128
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fa:	88 23       	and	r24, r24
    11fc:	2c f4       	brge	.+10     	; 0x1208 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	3f c0       	rjmp	.+126    	; 0x1286 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	4c f5       	brge	.+82     	; 0x1272 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	51 e4       	ldi	r21, 0x41	; 65
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <CLCD_voidSendCommand+0xe8>
    124a:	88 ec       	ldi	r24, 0xC8	; 200
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <CLCD_voidSendCommand+0xd6>
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	69 f7       	brne	.-38     	; 0x124a <CLCD_voidSendCommand+0xca>
    1270:	14 c0       	rjmp	.+40     	; 0x129a <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1272:	6f 81       	ldd	r22, Y+7	; 0x07
    1274:	78 85       	ldd	r23, Y+8	; 0x08
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <CLCD_voidSendCommand+0x112>
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
//#elif CLCD_MODE==4

//#endif
_delay_ms(1);

	}
    129a:	2f 96       	adiw	r28, 0x0f	; 15
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <CLCD_voidSendString>:

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <CLCD_voidSendString+0x6>
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	9b 83       	std	Y+3, r25	; 0x03
    12ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Iterator=0;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <CLCD_voidSendString+0x30>

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
	{
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	fc 01       	movw	r30, r24
    12cc:	e2 0f       	add	r30, r18
    12ce:	f3 1f       	adc	r31, r19
    12d0:	80 81       	ld	r24, Z
    12d2:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>
		LOC_u8Iterator++;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
	u8 LOC_u8Iterator=0;

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	fc 01       	movw	r30, r24
    12e8:	e2 0f       	add	r30, r18
    12ea:	f3 1f       	adc	r31, r19
    12ec:	80 81       	ld	r24, Z
    12ee:	88 23       	and	r24, r24
    12f0:	39 f7       	brne	.-50     	; 0x12c0 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
		LOC_u8Iterator++;

	}

}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <CLCD_voidSetPosition>:

*/


void CLCD_voidSetPosition(u8 Copy_u8X, u8 Copy_u8Y)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <CLCD_voidSetPosition+0x6>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Position = 0;
    130e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8X ==CLCD_ROW_1)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	19 f4       	brne	.+6      	; 0x131c <CLCD_voidSetPosition+0x1e>
	{
		Local_u8Position=Copy_u8Y;
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <CLCD_voidSetPosition+0x2a>
	}
	else if (Copy_u8X ==CLCD_ROW_2)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	19 f4       	brne	.+6      	; 0x1328 <CLCD_voidSetPosition+0x2a>
	{
		Local_u8Position = Copy_u8Y +0x40;
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	80 5c       	subi	r24, 0xC0	; 192
    1326:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8Position+Lcd_SetCursor); // Set DDRAM Address
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	80 58       	subi	r24, 0x80	; 128
    132c:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <CLCD_voidClearScreen>:




void CLCD_voidClearScreen(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	2e 97       	sbiw	r28, 0x0e	; 14
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(Lcd_Clear);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 e2       	ldi	r26, 0x20	; 32
    135c:	b1 e4       	ldi	r27, 0x41	; 65
    135e:	8b 87       	std	Y+11, r24	; 0x0b
    1360:	9c 87       	std	Y+12, r25	; 0x0c
    1362:	ad 87       	std	Y+13, r26	; 0x0d
    1364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	6b 85       	ldd	r22, Y+11	; 0x0b
    1368:	7c 85       	ldd	r23, Y+12	; 0x0c
    136a:	8d 85       	ldd	r24, Y+13	; 0x0d
    136c:	9e 85       	ldd	r25, Y+14	; 0x0e
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a ef       	ldi	r20, 0xFA	; 250
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8f 83       	std	Y+7, r24	; 0x07
    1380:	98 87       	std	Y+8, r25	; 0x08
    1382:	a9 87       	std	Y+9, r26	; 0x09
    1384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <CLCD_voidClearScreen+0xcc>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <CLCD_voidClearScreen+0xba>
    13fa:	9c 83       	std	Y+4, r25	; 0x04
    13fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <CLCD_voidClearScreen+0xae>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <CLCD_voidClearScreen+0xf6>
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //MORE THAN 1,53ms

}
    143a:	2e 96       	adiw	r28, 0x0e	; 14
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <CLCD_voidSendFallingEdge>:



static void CLCD_voidSendFallingEdge(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	6c 97       	sbiw	r28, 0x1c	; 28
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_HIGH);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e8       	ldi	r26, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	89 8f       	std	Y+25, r24	; 0x19
    1474:	9a 8f       	std	Y+26, r25	; 0x1a
    1476:	ab 8f       	std	Y+27, r26	; 0x1b
    1478:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147a:	69 8d       	ldd	r22, Y+25	; 0x19
    147c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    147e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1480:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4a ef       	ldi	r20, 0xFA	; 250
    1488:	54 e4       	ldi	r21, 0x44	; 68
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	8d 8b       	std	Y+21, r24	; 0x15
    1494:	9e 8b       	std	Y+22, r25	; 0x16
    1496:	af 8b       	std	Y+23, r26	; 0x17
    1498:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    149a:	6d 89       	ldd	r22, Y+21	; 0x15
    149c:	7e 89       	ldd	r23, Y+22	; 0x16
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 8d       	ldd	r25, Y+24	; 0x18
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5f e3       	ldi	r21, 0x3F	; 63
    14aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	2c f4       	brge	.+10     	; 0x14bc <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9c 8b       	std	Y+20, r25	; 0x14
    14b8:	8b 8b       	std	Y+19, r24	; 0x13
    14ba:	3f c0       	rjmp	.+126    	; 0x153a <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    14bc:	6d 89       	ldd	r22, Y+21	; 0x15
    14be:	7e 89       	ldd	r23, Y+22	; 0x16
    14c0:	8f 89       	ldd	r24, Y+23	; 0x17
    14c2:	98 8d       	ldd	r25, Y+24	; 0x18
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	57 e4       	ldi	r21, 0x47	; 71
    14cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	4c f5       	brge	.+82     	; 0x1526 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d4:	69 8d       	ldd	r22, Y+25	; 0x19
    14d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e2       	ldi	r20, 0x20	; 32
    14e2:	51 e4       	ldi	r21, 0x41	; 65
    14e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9c 8b       	std	Y+20, r25	; 0x14
    14fa:	8b 8b       	std	Y+19, r24	; 0x13
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <CLCD_voidSendFallingEdge+0xd0>
    14fe:	88 ec       	ldi	r24, 0xC8	; 200
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9a 8b       	std	Y+18, r25	; 0x12
    1504:	89 8b       	std	Y+17, r24	; 0x11
    1506:	89 89       	ldd	r24, Y+17	; 0x11
    1508:	9a 89       	ldd	r25, Y+18	; 0x12
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <CLCD_voidSendFallingEdge+0xbe>
    150e:	9a 8b       	std	Y+18, r25	; 0x12
    1510:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	9c 8b       	std	Y+20, r25	; 0x14
    151a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151c:	8b 89       	ldd	r24, Y+19	; 0x13
    151e:	9c 89       	ldd	r25, Y+20	; 0x14
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	69 f7       	brne	.-38     	; 0x14fe <CLCD_voidSendFallingEdge+0xb2>
    1524:	14 c0       	rjmp	.+40     	; 0x154e <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1526:	6d 89       	ldd	r22, Y+21	; 0x15
    1528:	7e 89       	ldd	r23, Y+22	; 0x16
    152a:	8f 89       	ldd	r24, Y+23	; 0x17
    152c:	98 8d       	ldd	r25, Y+24	; 0x18
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9c 8b       	std	Y+20, r25	; 0x14
    1538:	8b 8b       	std	Y+19, r24	; 0x13
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	9c 89       	ldd	r25, Y+20	; 0x14
    153e:	98 8b       	std	Y+16, r25	; 0x10
    1540:	8f 87       	std	Y+15, r24	; 0x0f
    1542:	8f 85       	ldd	r24, Y+15	; 0x0f
    1544:	98 89       	ldd	r25, Y+16	; 0x10
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <CLCD_voidSendFallingEdge+0xfa>
    154a:	98 8b       	std	Y+16, r25	; 0x10
    154c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);


	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_LOW);
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e8       	ldi	r26, 0x80	; 128
    155e:	bf e3       	ldi	r27, 0x3F	; 63
    1560:	8b 87       	std	Y+11, r24	; 0x0b
    1562:	9c 87       	std	Y+12, r25	; 0x0c
    1564:	ad 87       	std	Y+13, r26	; 0x0d
    1566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4a ef       	ldi	r20, 0xFA	; 250
    1576:	54 e4       	ldi	r21, 0x44	; 68
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8f 83       	std	Y+7, r24	; 0x07
    1582:	98 87       	std	Y+8, r25	; 0x08
    1584:	a9 87       	std	Y+9, r26	; 0x09
    1586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	2c f4       	brge	.+10     	; 0x15aa <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	57 e4       	ldi	r21, 0x47	; 71
    15ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	4c f5       	brge	.+82     	; 0x1614 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <CLCD_voidSendFallingEdge+0x1be>
    15ec:	88 ec       	ldi	r24, 0xC8	; 200
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <CLCD_voidSendFallingEdge+0x1ac>
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <CLCD_voidSendFallingEdge+0x1a0>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <CLCD_voidSendFallingEdge+0x1e8>
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);


}
    163c:	6c 96       	adiw	r28, 0x1c	; 28
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <CLCD_voidSendExtraChar>:


// you enter the position of display the (row,col),and the start i want to display char from it and the end

void CLCD_voidSendExtraChar(u8 Copy_u8Row ,u8 Copy_u8Col,u8 start,u8 end)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <CLCD_voidSendExtraChar+0x6>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <CLCD_voidSendExtraChar+0x8>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	6b 83       	std	Y+3, r22	; 0x03
    1660:	4c 83       	std	Y+4, r20	; 0x04
    1662:	2d 83       	std	Y+5, r18	; 0x05
	u8 lOC_u8Iterator=0;
    1664:	19 82       	std	Y+1, r1	; 0x01


	CLCD_voidSendCommand(Lcd_CGRAM);
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	0c c0       	rjmp	.+24     	; 0x1688 <CLCD_voidSendExtraChar+0x3a>
	{
		CLCD_voidSendData(CLCD_u8ExtraChar[lOC_u8Iterator]);
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	e1 5f       	subi	r30, 0xF1	; 241
    167a:	fe 4f       	sbci	r31, 0xFE	; 254
    167c:	80 81       	ld	r24, Z
    167e:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>

	CLCD_voidSendCommand(Lcd_CGRAM);



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	80 33       	cpi	r24, 0x30	; 48
    168c:	88 f3       	brcs	.-30     	; 0x1670 <CLCD_voidSendExtraChar+0x22>



	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	6b 81       	ldd	r22, Y+3	; 0x03
    1692:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>

	for(lOC_u8Iterator=start;lOC_u8Iterator<end;lOC_u8Iterator++)
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <CLCD_voidSendExtraChar+0x5a>
	{
		CLCD_voidSendData(lOC_u8Iterator);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>

	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);

	for(lOC_u8Iterator=start;lOC_u8Iterator<end;lOC_u8Iterator++)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	99 81       	ldd	r25, Y+1	; 0x01
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	98 17       	cp	r25, r24
    16ae:	b0 f3       	brcs	.-20     	; 0x169c <CLCD_voidSendExtraChar+0x4e>





}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <CLCD_voidDrawSpecialChar>:


void CLCD_voidDrawSpecialChar (u8 *Copy_pu8Pattern, u8 Copy_u8Loc,u8 Copy_u8X,u8 Copy_u8Y)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	27 97       	sbiw	r28, 0x07	; 7
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	6d 83       	std	Y+5, r22	; 0x05
    16da:	4e 83       	std	Y+6, r20	; 0x06
    16dc:	2f 83       	std	Y+7, r18	; 0x07
	// Calculate the CGRAM Address
	u8 Local_u8CgramAdd = Copy_u8Loc * 8;
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	8a 83       	std	Y+2, r24	; 0x02
	// Command to write on CGRAM
	CLCD_voidSendCommand(Local_u8CgramAdd+64);
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 5c       	subi	r24, 0xC0	; 192
    16f6:	0e 94 c0 08 	call	0x1180	; 0x1180 <CLCD_voidSendCommand>


	for (u8 Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++)
    16fa:	19 82       	std	Y+1, r1	; 0x01
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <CLCD_voidDrawSpecialChar+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	fc 01       	movw	r30, r24
    170a:	e2 0f       	add	r30, r18
    170c:	f3 1f       	adc	r31, r19
    170e:	80 81       	ld	r24, Z
    1710:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>
	u8 Local_u8CgramAdd = Copy_u8Loc * 8;
	// Command to write on CGRAM
	CLCD_voidSendCommand(Local_u8CgramAdd+64);


	for (u8 Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	78 f3       	brcs	.-34     	; 0x16fe <CLCD_voidDrawSpecialChar+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidSetPosition(Copy_u8X,Copy_u8Y);
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
	//CLCD_voidSendCommand(Local_u8CgramAdd+128);

}
    1728:	27 96       	adiw	r28, 0x07	; 7
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <CLCD_voidSendNum>:


/*********************************************************************************************************/

void CLCD_voidSendNum(u16 Copy_u16Num)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	2e 97       	sbiw	r28, 0x0e	; 14
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	9e 87       	std	Y+14, r25	; 0x0e
    1750:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8Arr[10];
	u8 Local_u8Iterator1=0,Local_u8Iterator2;
    1752:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u16Num==0)
    1754:	8d 85       	ldd	r24, Y+13	; 0x0d
    1756:	9e 85       	ldd	r25, Y+14	; 0x0e
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	11 f5       	brne	.+68     	; 0x17a0 <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>
    1762:	22 c0       	rjmp	.+68     	; 0x17a8 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while(Copy_u16Num)
		{
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	e8 2f       	mov	r30, r24
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	b9 01       	movw	r22, r18
    1774:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__udivmodhi4>
    1778:	28 2f       	mov	r18, r24
    177a:	20 5d       	subi	r18, 0xD0	; 208
    177c:	ce 01       	movw	r24, r28
    177e:	03 96       	adiw	r24, 0x03	; 3
    1780:	e8 0f       	add	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	20 83       	st	Z, r18
			Copy_u16Num/=10;
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	2a e0       	ldi	r18, 0x0A	; 10
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__udivmodhi4>
    1794:	cb 01       	movw	r24, r22
    1796:	9e 87       	std	Y+14, r25	; 0x0e
    1798:	8d 87       	std	Y+13, r24	; 0x0d
			Local_u8Iterator1++;
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Copy_u16Num)
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	f1 f6       	brne	.-68     	; 0x1764 <CLCD_voidSendNum+0x2a>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	11 c0       	rjmp	.+34     	; 0x17d0 <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 01       	movw	r18, r24
    17b6:	21 50       	subi	r18, 0x01	; 1
    17b8:	30 40       	sbci	r19, 0x00	; 0
    17ba:	ce 01       	movw	r24, r28
    17bc:	03 96       	adiw	r24, 0x03	; 3
    17be:	fc 01       	movw	r30, r24
    17c0:	e2 0f       	add	r30, r18
    17c2:	f3 1f       	adc	r31, r19
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_voidSendData>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	81 50       	subi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 23       	and	r24, r24
    17d4:	61 f7       	brne	.-40     	; 0x17ae <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
	}

}
    17d6:	2e 96       	adiw	r28, 0x0e	; 14
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <DIO_voidSetPortDirection>:
			#include "DIO_config.h"
			#include "DIO_interface.h"
			#include "DIO_private.h"

			void DIO_voidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8DIRECTION)
			{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <DIO_voidSetPortDirection+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_voidSetPortDirection+0x8>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	6a 83       	std	Y+2, r22	; 0x02
				if(DIO_PORTD>=Copy_u8PORT)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	90 f5       	brcc	.+100    	; 0x1862 <DIO_voidSetPortDirection+0x7a>
				{
					switch(Copy_u8PORT)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	3c 83       	std	Y+4, r19	; 0x04
    1806:	2b 83       	std	Y+3, r18	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	d1 f0       	breq	.+52     	; 0x1846 <DIO_voidSetPortDirection+0x5e>
    1812:	2b 81       	ldd	r18, Y+3	; 0x03
    1814:	3c 81       	ldd	r19, Y+4	; 0x04
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	2c f4       	brge	.+10     	; 0x1826 <DIO_voidSetPortDirection+0x3e>
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	61 f0       	breq	.+24     	; 0x183c <DIO_voidSetPortDirection+0x54>
    1824:	1e c0       	rjmp	.+60     	; 0x1862 <DIO_voidSetPortDirection+0x7a>
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	81 f0       	breq	.+32     	; 0x1850 <DIO_voidSetPortDirection+0x68>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	81 f0       	breq	.+32     	; 0x185a <DIO_voidSetPortDirection+0x72>
    183a:	13 c0       	rjmp	.+38     	; 0x1862 <DIO_voidSetPortDirection+0x7a>
					{
					case DIO_PORTA: DDRA=Copy_u8DIRECTION;break;
    183c:	ea e3       	ldi	r30, 0x3A	; 58
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	80 83       	st	Z, r24
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTB: DDRB=Copy_u8DIRECTION;break;
    1846:	e7 e3       	ldi	r30, 0x37	; 55
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	80 83       	st	Z, r24
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTC: DDRC=Copy_u8DIRECTION;break;
    1850:	e4 e3       	ldi	r30, 0x34	; 52
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTD: DDRD=Copy_u8DIRECTION;break;
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 83       	st	Z, r24
					}


				}

			}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <DIO_voidSetPortValue>:




			void DIO_voidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8VALUE)
			{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <DIO_voidSetPortValue+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <DIO_voidSetPortValue+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(255>=Copy_u8VALUE||PORT_VAL_HIGH==Copy_u8VALUE||PORT_VAL_LOW==Copy_u8VALUE))
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	90 f5       	brcc	.+100    	; 0x18ea <DIO_voidSetPortValue+0x7a>
					{
						switch(Copy_u8PORT)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3c 83       	std	Y+4, r19	; 0x04
    188e:	2b 83       	std	Y+3, r18	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	91 05       	cpc	r25, r1
    1898:	d1 f0       	breq	.+52     	; 0x18ce <DIO_voidSetPortValue+0x5e>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <DIO_voidSetPortValue+0x3e>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <DIO_voidSetPortValue+0x54>
    18ac:	1e c0       	rjmp	.+60     	; 0x18ea <DIO_voidSetPortValue+0x7a>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	81 f0       	breq	.+32     	; 0x18d8 <DIO_voidSetPortValue+0x68>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <DIO_voidSetPortValue+0x72>
    18c2:	13 c0       	rjmp	.+38     	; 0x18ea <DIO_voidSetPortValue+0x7a>
						{
						case DIO_PORTA: PORTA= Copy_u8VALUE;break;
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	80 83       	st	Z, r24
    18cc:	0e c0       	rjmp	.+28     	; 0x18ea <DIO_voidSetPortValue+0x7a>
						case DIO_PORTB: PORTB= Copy_u8VALUE;break;
    18ce:	e8 e3       	ldi	r30, 0x38	; 56
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	80 83       	st	Z, r24
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <DIO_voidSetPortValue+0x7a>
						case DIO_PORTC: PORTC= Copy_u8VALUE;break;
    18d8:	e5 e3       	ldi	r30, 0x35	; 53
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <DIO_voidSetPortValue+0x7a>
						case DIO_PORTD: PORTD= Copy_u8VALUE;break;
    18e2:	e2 e3       	ldi	r30, 0x32	; 50
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24

						}

					}

			}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_voidTogglePortValue>:



			void DIO_voidTogglePortValue(u8 Copy_u8PORT)
			{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_voidTogglePortValue+0x6>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
				if(DIO_PORTD>=Copy_u8PORT)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	08 f0       	brcs	.+2      	; 0x190e <DIO_voidTogglePortValue+0x16>
    190c:	3e c0       	rjmp	.+124    	; 0x198a <DIO_voidTogglePortValue+0x92>
				{
					switch(Copy_u8PORT)
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3b 83       	std	Y+3, r19	; 0x03
    1916:	2a 83       	std	Y+2, r18	; 0x02
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	91 05       	cpc	r25, r1
    1920:	e9 f0       	breq	.+58     	; 0x195c <DIO_voidTogglePortValue+0x64>
    1922:	2a 81       	ldd	r18, Y+2	; 0x02
    1924:	3b 81       	ldd	r19, Y+3	; 0x03
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	2c f4       	brge	.+10     	; 0x1936 <DIO_voidTogglePortValue+0x3e>
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	61 f0       	breq	.+24     	; 0x194c <DIO_voidTogglePortValue+0x54>
    1934:	2a c0       	rjmp	.+84     	; 0x198a <DIO_voidTogglePortValue+0x92>
    1936:	2a 81       	ldd	r18, Y+2	; 0x02
    1938:	3b 81       	ldd	r19, Y+3	; 0x03
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	b1 f0       	breq	.+44     	; 0x196c <DIO_voidTogglePortValue+0x74>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	83 30       	cpi	r24, 0x03	; 3
    1946:	91 05       	cpc	r25, r1
    1948:	c9 f0       	breq	.+50     	; 0x197c <DIO_voidTogglePortValue+0x84>
    194a:	1f c0       	rjmp	.+62     	; 0x198a <DIO_voidTogglePortValue+0x92>
					{
					case DIO_PORTA: PORTA=~PORTA;break;
    194c:	ab e3       	ldi	r26, 0x3B	; 59
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	eb e3       	ldi	r30, 0x3B	; 59
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 95       	com	r24
    1958:	8c 93       	st	X, r24
    195a:	17 c0       	rjmp	.+46     	; 0x198a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTB: PORTB=~PORTB;break;
    195c:	a8 e3       	ldi	r26, 0x38	; 56
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e8 e3       	ldi	r30, 0x38	; 56
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 95       	com	r24
    1968:	8c 93       	st	X, r24
    196a:	0f c0       	rjmp	.+30     	; 0x198a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTC: PORTC=~PORTC;break;
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 95       	com	r24
    1978:	8c 93       	st	X, r24
    197a:	07 c0       	rjmp	.+14     	; 0x198a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTD: PORTD=~PORTD;break;
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 95       	com	r24
    1988:	8c 93       	st	X, r24



				}

			}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <DIO_voidClearPortValue>:


			void DIO_voidClearPortValue(u8 Copy_u8PORT)
			{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <DIO_voidClearPortValue+0x6>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01

				if(DIO_PORTD>=Copy_u8PORT)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	84 30       	cpi	r24, 0x04	; 4
    19a8:	70 f5       	brcc	.+92     	; 0x1a06 <DIO_voidClearPortValue+0x70>
						{
							switch(Copy_u8PORT)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3b 83       	std	Y+3, r19	; 0x03
    19b2:	2a 83       	std	Y+2, r18	; 0x02
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	c9 f0       	breq	.+50     	; 0x19f0 <DIO_voidClearPortValue+0x5a>
    19be:	2a 81       	ldd	r18, Y+2	; 0x02
    19c0:	3b 81       	ldd	r19, Y+3	; 0x03
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <DIO_voidClearPortValue+0x3c>
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <DIO_voidClearPortValue+0x52>
    19d0:	1a c0       	rjmp	.+52     	; 0x1a06 <DIO_voidClearPortValue+0x70>
    19d2:	2a 81       	ldd	r18, Y+2	; 0x02
    19d4:	3b 81       	ldd	r19, Y+3	; 0x03
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	71 f0       	breq	.+28     	; 0x19f8 <DIO_voidClearPortValue+0x62>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	83 30       	cpi	r24, 0x03	; 3
    19e2:	91 05       	cpc	r25, r1
    19e4:	69 f0       	breq	.+26     	; 0x1a00 <DIO_voidClearPortValue+0x6a>
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <DIO_voidClearPortValue+0x70>
							{
							case DIO_PORTA: PORTA=PORT_VAL_LOW;break;
    19e8:	eb e3       	ldi	r30, 0x3B	; 59
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
    19ee:	0b c0       	rjmp	.+22     	; 0x1a06 <DIO_voidClearPortValue+0x70>
							case DIO_PORTB: PORTB=PORT_VAL_LOW;break;
    19f0:	e8 e3       	ldi	r30, 0x38	; 56
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	10 82       	st	Z, r1
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <DIO_voidClearPortValue+0x70>
							case DIO_PORTC: PORTC=PORT_VAL_LOW;break;
    19f8:	e5 e3       	ldi	r30, 0x35	; 53
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	10 82       	st	Z, r1
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <DIO_voidClearPortValue+0x70>
							case DIO_PORTD: PORTD=PORT_VAL_LOW;break;
    1a00:	e2 e3       	ldi	r30, 0x32	; 50
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	10 82       	st	Z, r1


						}


			}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <DIO_voidSetPinDirection>:

			/*************************************************************PIN FUNCTIONS****************************************************************/


			void DIO_voidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8DIRECTION)
			{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	27 97       	sbiw	r28, 0x07	; 7
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	6a 83       	std	Y+2, r22	; 0x02
    1a2a:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <DIO_voidSetPinDirection+0x22>
    1a32:	ee c0       	rjmp	.+476    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	88 30       	cpi	r24, 0x08	; 8
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <DIO_voidSetPinDirection+0x2a>
    1a3a:	ea c0       	rjmp	.+468    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
				{
					if(PIN_DIR_INPUT==Copy_u8DIRECTION)
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <DIO_voidSetPinDirection+0x32>
    1a42:	74 c0       	rjmp	.+232    	; 0x1b2c <DIO_voidSetPinDirection+0x11a>
					{
						switch(Copy_u8PORT)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3f 83       	std	Y+7, r19	; 0x07
    1a4c:	2e 83       	std	Y+6, r18	; 0x06
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	59 f1       	breq	.+86     	; 0x1aae <DIO_voidSetPinDirection+0x9c>
    1a58:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <DIO_voidSetPinDirection+0x5a>
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	9f 81       	ldd	r25, Y+7	; 0x07
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f0       	breq	.+26     	; 0x1a84 <DIO_voidSetPinDirection+0x72>
    1a6a:	d2 c0       	rjmp	.+420    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
    1a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	89 f1       	breq	.+98     	; 0x1ad8 <DIO_voidSetPinDirection+0xc6>
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <DIO_voidSetPinDirection+0x70>
    1a80:	40 c0       	rjmp	.+128    	; 0x1b02 <DIO_voidSetPinDirection+0xf0>
    1a82:	c6 c0       	rjmp	.+396    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
						{
						case DIO_PORTA:CLR_BIT(DDRA,Copy_u8PIN);break;
    1a84:	aa e3       	ldi	r26, 0x3A	; 58
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ea e3       	ldi	r30, 0x3A	; 58
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_voidSetPinDirection+0x90>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_voidSetPinDirection+0x8c>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	b1 c0       	rjmp	.+354    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTB:CLR_BIT(DDRB,Copy_u8PIN);break;
    1aae:	a7 e3       	ldi	r26, 0x37	; 55
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e3       	ldi	r30, 0x37	; 55
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_voidSetPinDirection+0xba>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_voidSetPinDirection+0xb6>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	9c c0       	rjmp	.+312    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTC:CLR_BIT(DDRC,Copy_u8PIN);break;
    1ad8:	a4 e3       	ldi	r26, 0x34	; 52
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e4 e3       	ldi	r30, 0x34	; 52
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <DIO_voidSetPinDirection+0xe4>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <DIO_voidSetPinDirection+0xe0>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	87 c0       	rjmp	.+270    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTD:CLR_BIT(DDRD,Copy_u8PIN);break;
    1b02:	a1 e3       	ldi	r26, 0x31	; 49
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e1 e3       	ldi	r30, 0x31	; 49
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_voidSetPinDirection+0x10e>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_voidSetPinDirection+0x10a>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	72 c0       	rjmp	.+228    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>

						}

					}

					else if(PIN_DIR_OUTPUT==Copy_u8DIRECTION)
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <DIO_voidSetPinDirection+0x122>
    1b32:	6e c0       	rjmp	.+220    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
					{
						switch(Copy_u8PORT)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3d 83       	std	Y+5, r19	; 0x05
    1b3c:	2c 83       	std	Y+4, r18	; 0x04
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	49 f1       	breq	.+82     	; 0x1b9a <DIO_voidSetPinDirection+0x188>
    1b48:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <DIO_voidSetPinDirection+0x14a>
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	9d 81       	ldd	r25, Y+5	; 0x05
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <DIO_voidSetPinDirection+0x160>
    1b5a:	5a c0       	rjmp	.+180    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
    1b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	71 f1       	breq	.+92     	; 0x1bc2 <DIO_voidSetPinDirection+0x1b0>
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	e9 f1       	breq	.+122    	; 0x1bea <DIO_voidSetPinDirection+0x1d8>
    1b70:	4f c0       	rjmp	.+158    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
									{
									case DIO_PORTA:SET_BIT(DDRA,Copy_u8PIN);break;
    1b72:	aa e3       	ldi	r26, 0x3A	; 58
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ea e3       	ldi	r30, 0x3A	; 58
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_voidSetPinDirection+0x17e>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_voidSetPinDirection+0x17a>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	3b c0       	rjmp	.+118    	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTB:SET_BIT(DDRB,Copy_u8PIN);break;
    1b9a:	a7 e3       	ldi	r26, 0x37	; 55
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e7 e3       	ldi	r30, 0x37	; 55
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_voidSetPinDirection+0x1a6>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_voidSetPinDirection+0x1a2>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	27 c0       	rjmp	.+78     	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTC:SET_BIT(DDRC,Copy_u8PIN);break;
    1bc2:	a4 e3       	ldi	r26, 0x34	; 52
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e4 e3       	ldi	r30, 0x34	; 52
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <DIO_voidSetPinDirection+0x1ce>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <DIO_voidSetPinDirection+0x1ca>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	13 c0       	rjmp	.+38     	; 0x1c10 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTD:SET_BIT(DDRD,Copy_u8PIN);break;
    1bea:	a1 e3       	ldi	r26, 0x31	; 49
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e1 e3       	ldi	r30, 0x31	; 49
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <DIO_voidSetPinDirection+0x1f6>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <DIO_voidSetPinDirection+0x1f2>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24

				}



			}
    1c10:	27 96       	adiw	r28, 0x07	; 7
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <DIO_voidSetPinValue>:




			void DIO_voidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8VALUE)
			{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	27 97       	sbiw	r28, 0x07	; 7
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	6a 83       	std	Y+2, r22	; 0x02
    1c3a:	4b 83       	std	Y+3, r20	; 0x03

			if(DIO_PORTD>=Copy_u8PORT&&DIO_PIN7>=Copy_u8PIN&&(255<=Copy_u8VALUE||PIN_VAL_HIGH==Copy_u8VALUE||PIN_VAL_LOW==Copy_u8VALUE))
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <DIO_voidSetPinValue+0x22>
    1c42:	f8 c0       	rjmp	.+496    	; 0x1e34 <DIO_voidSetPinValue+0x212>
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <DIO_voidSetPinValue+0x2a>
    1c4a:	f4 c0       	rjmp	.+488    	; 0x1e34 <DIO_voidSetPinValue+0x212>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c50:	39 f0       	breq	.+14     	; 0x1c60 <DIO_voidSetPinValue+0x3e>
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	21 f0       	breq	.+8      	; 0x1c60 <DIO_voidSetPinValue+0x3e>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <DIO_voidSetPinValue+0x3e>
    1c5e:	ea c0       	rjmp	.+468    	; 0x1e34 <DIO_voidSetPinValue+0x212>
			{
				if(PIN_VAL_HIGH==Copy_u8VALUE)
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <DIO_voidSetPinValue+0x46>
    1c66:	6f c0       	rjmp	.+222    	; 0x1d46 <DIO_voidSetPinValue+0x124>
				{
					switch(Copy_u8PORT)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3f 83       	std	Y+7, r19	; 0x07
    1c70:	2e 83       	std	Y+6, r18	; 0x06
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	49 f1       	breq	.+82     	; 0x1cce <DIO_voidSetPinValue+0xac>
    1c7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <DIO_voidSetPinValue+0x6e>
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <DIO_voidSetPinValue+0x84>
    1c8e:	d2 c0       	rjmp	.+420    	; 0x1e34 <DIO_voidSetPinValue+0x212>
    1c90:	2e 81       	ldd	r18, Y+6	; 0x06
    1c92:	3f 81       	ldd	r19, Y+7	; 0x07
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	71 f1       	breq	.+92     	; 0x1cf6 <DIO_voidSetPinValue+0xd4>
    1c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	e9 f1       	breq	.+122    	; 0x1d1e <DIO_voidSetPinValue+0xfc>
    1ca4:	c7 c0       	rjmp	.+398    	; 0x1e34 <DIO_voidSetPinValue+0x212>
											{
											case DIO_PORTA:SET_BIT(PORTA,Copy_u8PIN);break;
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_voidSetPinValue+0xa2>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_voidSetPinValue+0x9e>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	b3 c0       	rjmp	.+358    	; 0x1e34 <DIO_voidSetPinValue+0x212>
											case DIO_PORTB:SET_BIT(PORTB,Copy_u8PIN);break;
    1cce:	a8 e3       	ldi	r26, 0x38	; 56
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e8 e3       	ldi	r30, 0x38	; 56
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_voidSetPinValue+0xca>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_voidSetPinValue+0xc6>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	9f c0       	rjmp	.+318    	; 0x1e34 <DIO_voidSetPinValue+0x212>
											case DIO_PORTC:SET_BIT(PORTC,Copy_u8PIN);break;
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinValue+0xf2>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinValue+0xee>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	8b c0       	rjmp	.+278    	; 0x1e34 <DIO_voidSetPinValue+0x212>
											case DIO_PORTD:SET_BIT(PORTD,Copy_u8PIN);break;
    1d1e:	a2 e3       	ldi	r26, 0x32	; 50
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e2 e3       	ldi	r30, 0x32	; 50
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_voidSetPinValue+0x11a>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_voidSetPinValue+0x116>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	77 c0       	rjmp	.+238    	; 0x1e34 <DIO_voidSetPinValue+0x212>
											}


				}

				else if(PIN_VAL_LOW==Copy_u8VALUE)
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	88 23       	and	r24, r24
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <DIO_voidSetPinValue+0x12c>
    1d4c:	73 c0       	rjmp	.+230    	; 0x1e34 <DIO_voidSetPinValue+0x212>
				{
					switch(Copy_u8PORT)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3d 83       	std	Y+5, r19	; 0x05
    1d56:	2c 83       	std	Y+4, r18	; 0x04
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	59 f1       	breq	.+86     	; 0x1db8 <DIO_voidSetPinValue+0x196>
    1d62:	2c 81       	ldd	r18, Y+4	; 0x04
    1d64:	3d 81       	ldd	r19, Y+5	; 0x05
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <DIO_voidSetPinValue+0x154>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f0       	breq	.+26     	; 0x1d8e <DIO_voidSetPinValue+0x16c>
    1d74:	5f c0       	rjmp	.+190    	; 0x1e34 <DIO_voidSetPinValue+0x212>
    1d76:	2c 81       	ldd	r18, Y+4	; 0x04
    1d78:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	89 f1       	breq	.+98     	; 0x1de2 <DIO_voidSetPinValue+0x1c0>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	91 05       	cpc	r25, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <DIO_voidSetPinValue+0x16a>
    1d8a:	40 c0       	rjmp	.+128    	; 0x1e0c <DIO_voidSetPinValue+0x1ea>
    1d8c:	53 c0       	rjmp	.+166    	; 0x1e34 <DIO_voidSetPinValue+0x212>
								{
								case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    1d8e:	ab e3       	ldi	r26, 0x3B	; 59
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	eb e3       	ldi	r30, 0x3B	; 59
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_voidSetPinValue+0x18a>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_voidSetPinValue+0x186>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	3e c0       	rjmp	.+124    	; 0x1e34 <DIO_voidSetPinValue+0x212>
								case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    1db8:	a8 e3       	ldi	r26, 0x38	; 56
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e8 e3       	ldi	r30, 0x38	; 56
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_voidSetPinValue+0x1b4>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_voidSetPinValue+0x1b0>
    1dda:	80 95       	com	r24
    1ddc:	84 23       	and	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	29 c0       	rjmp	.+82     	; 0x1e34 <DIO_voidSetPinValue+0x212>
								case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    1de2:	a5 e3       	ldi	r26, 0x35	; 53
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e3       	ldi	r30, 0x35	; 53
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_voidSetPinValue+0x1de>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_voidSetPinValue+0x1da>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <DIO_voidSetPinValue+0x212>
								case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_voidSetPinValue+0x208>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <DIO_voidSetPinValue+0x204>
    1e2e:	80 95       	com	r24
    1e30:	84 23       	and	r24, r20
    1e32:	8c 93       	st	X, r24
				}

				}


			}
    1e34:	27 96       	adiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <DIO_voidGetPinValue>:




			u8 DIO_voidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <DIO_voidGetPinValue+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <DIO_voidGetPinValue+0x8>
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	6b 83       	std	Y+3, r22	; 0x03
			  u8 LOC_u8RESULT=0;
    1e58:	19 82       	std	Y+1, r1	; 0x01
			  if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <DIO_voidGetPinValue+0x1c>
    1e60:	6b c0       	rjmp	.+214    	; 0x1f38 <DIO_voidGetPinValue+0xf2>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 30       	cpi	r24, 0x08	; 8
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <DIO_voidGetPinValue+0x24>
    1e68:	67 c0       	rjmp	.+206    	; 0x1f38 <DIO_voidGetPinValue+0xf2>
			  {


				  switch(Copy_u8PORT)
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	3d 83       	std	Y+5, r19	; 0x05
    1e72:	2c 83       	std	Y+4, r18	; 0x04
    1e74:	4c 81       	ldd	r20, Y+4	; 0x04
    1e76:	5d 81       	ldd	r21, Y+5	; 0x05
    1e78:	41 30       	cpi	r20, 0x01	; 1
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	41 f1       	breq	.+80     	; 0x1ece <DIO_voidGetPinValue+0x88>
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	91 05       	cpc	r25, r1
    1e86:	34 f4       	brge	.+12     	; 0x1e94 <DIO_voidGetPinValue+0x4e>
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	21 15       	cp	r18, r1
    1e8e:	31 05       	cpc	r19, r1
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <DIO_voidGetPinValue+0x64>
    1e92:	52 c0       	rjmp	.+164    	; 0x1f38 <DIO_voidGetPinValue+0xf2>
    1e94:	4c 81       	ldd	r20, Y+4	; 0x04
    1e96:	5d 81       	ldd	r21, Y+5	; 0x05
    1e98:	42 30       	cpi	r20, 0x02	; 2
    1e9a:	51 05       	cpc	r21, r1
    1e9c:	51 f1       	breq	.+84     	; 0x1ef2 <DIO_voidGetPinValue+0xac>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	b9 f1       	breq	.+110    	; 0x1f16 <DIO_voidGetPinValue+0xd0>
    1ea8:	47 c0       	rjmp	.+142    	; 0x1f38 <DIO_voidGetPinValue+0xf2>

				  {
					case DIO_PORTA:LOC_u8RESULT=GET_BIT(PINA,Copy_u8PIN);break;
    1eaa:	e9 e3       	ldi	r30, 0x39	; 57
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a9 01       	movw	r20, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <DIO_voidGetPinValue+0x7c>
    1ebe:	55 95       	asr	r21
    1ec0:	47 95       	ror	r20
    1ec2:	8a 95       	dec	r24
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <DIO_voidGetPinValue+0x78>
    1ec6:	ca 01       	movw	r24, r20
    1ec8:	81 70       	andi	r24, 0x01	; 1
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	35 c0       	rjmp	.+106    	; 0x1f38 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTB:LOC_u8RESULT=GET_BIT(PINB,Copy_u8PIN);break;
    1ece:	e6 e3       	ldi	r30, 0x36	; 54
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_voidGetPinValue+0xa0>
    1ee2:	55 95       	asr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_voidGetPinValue+0x9c>
    1eea:	ca 01       	movw	r24, r20
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	23 c0       	rjmp	.+70     	; 0x1f38 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTC:LOC_u8RESULT=GET_BIT(PINC,Copy_u8PIN);break;
    1ef2:	e3 e3       	ldi	r30, 0x33	; 51
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_voidGetPinValue+0xc4>
    1f06:	55 95       	asr	r21
    1f08:	47 95       	ror	r20
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_voidGetPinValue+0xc0>
    1f0e:	ca 01       	movw	r24, r20
    1f10:	81 70       	andi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTD:LOC_u8RESULT=GET_BIT(PIND,Copy_u8PIN);break;
    1f16:	e0 e3       	ldi	r30, 0x30	; 48
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a9 01       	movw	r20, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_voidGetPinValue+0xe8>
    1f2a:	55 95       	asr	r21
    1f2c:	47 95       	ror	r20
    1f2e:	8a 95       	dec	r24
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_voidGetPinValue+0xe4>
    1f32:	ca 01       	movw	r24, r20
    1f34:	81 70       	andi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01

				  }


				}
			  return LOC_u8RESULT;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01


			}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <DIO_voidTogglePinValue>:



			void DIO_voidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <DIO_voidTogglePinValue+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <DIO_voidTogglePinValue+0x8>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <DIO_voidTogglePinValue+0x18>
    1f60:	72 c0       	rjmp	.+228    	; 0x2046 <DIO_voidTogglePinValue+0xfc>
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	88 30       	cpi	r24, 0x08	; 8
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <DIO_voidTogglePinValue+0x20>
    1f68:	6e c0       	rjmp	.+220    	; 0x2046 <DIO_voidTogglePinValue+0xfc>
				  {
					switch(Copy_u8PORT)
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	3c 83       	std	Y+4, r19	; 0x04
    1f72:	2b 83       	std	Y+3, r18	; 0x03
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	49 f1       	breq	.+82     	; 0x1fd0 <DIO_voidTogglePinValue+0x86>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <DIO_voidTogglePinValue+0x48>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	61 f0       	breq	.+24     	; 0x1fa8 <DIO_voidTogglePinValue+0x5e>
    1f90:	5a c0       	rjmp	.+180    	; 0x2046 <DIO_voidTogglePinValue+0xfc>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	71 f1       	breq	.+92     	; 0x1ff8 <DIO_voidTogglePinValue+0xae>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	e9 f1       	breq	.+122    	; 0x2020 <DIO_voidTogglePinValue+0xd6>
    1fa6:	4f c0       	rjmp	.+158    	; 0x2046 <DIO_voidTogglePinValue+0xfc>
							{
							case DIO_PORTA:TOG_BIT(PORTA, Copy_u8PIN) ;break;
    1fa8:	ab e3       	ldi	r26, 0x3B	; 59
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e3       	ldi	r30, 0x3B	; 59
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_voidTogglePinValue+0x7c>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_voidTogglePinValue+0x78>
    1fca:	84 27       	eor	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	3b c0       	rjmp	.+118    	; 0x2046 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTB:TOG_BIT(PORTB, Copy_u8PIN) ;break;
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_voidTogglePinValue+0xa4>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_voidTogglePinValue+0xa0>
    1ff2:	84 27       	eor	r24, r20
    1ff4:	8c 93       	st	X, r24
    1ff6:	27 c0       	rjmp	.+78     	; 0x2046 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTC:TOG_BIT(PORTC, Copy_u8PIN) ;break;
    1ff8:	a5 e3       	ldi	r26, 0x35	; 53
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e5 e3       	ldi	r30, 0x35	; 53
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 2e       	mov	r0, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_voidTogglePinValue+0xcc>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	0a 94       	dec	r0
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_voidTogglePinValue+0xc8>
    201a:	84 27       	eor	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	13 c0       	rjmp	.+38     	; 0x2046 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTD:TOG_BIT(PORTD, Copy_u8PIN) ;break;
    2020:	a2 e3       	ldi	r26, 0x32	; 50
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e2 e3       	ldi	r30, 0x32	; 50
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	48 2f       	mov	r20, r24
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 2e       	mov	r0, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <DIO_voidTogglePinValue+0xf4>
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0a 94       	dec	r0
    2040:	e2 f7       	brpl	.-8      	; 0x203a <DIO_voidTogglePinValue+0xf0>
    2042:	84 27       	eor	r24, r20
    2044:	8c 93       	st	X, r24





			}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <DIO_voidClearPinValue>:



			void DIO_voidClearPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <DIO_voidClearPinValue+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <DIO_voidClearPinValue+0x8>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	6a 83       	std	Y+2, r22	; 0x02

				 if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f0       	brcs	.+2      	; 0x206c <DIO_voidClearPinValue+0x18>
    206a:	77 c0       	rjmp	.+238    	; 0x215a <DIO_voidClearPinValue+0x106>
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	08 f0       	brcs	.+2      	; 0x2074 <DIO_voidClearPinValue+0x20>
    2072:	73 c0       	rjmp	.+230    	; 0x215a <DIO_voidClearPinValue+0x106>
					  {

					 switch(Copy_u8PORT)
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	3c 83       	std	Y+4, r19	; 0x04
    207c:	2b 83       	std	Y+3, r18	; 0x03
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	91 05       	cpc	r25, r1
    2086:	59 f1       	breq	.+86     	; 0x20de <DIO_voidClearPinValue+0x8a>
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	22 30       	cpi	r18, 0x02	; 2
    208e:	31 05       	cpc	r19, r1
    2090:	2c f4       	brge	.+10     	; 0x209c <DIO_voidClearPinValue+0x48>
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f0       	breq	.+26     	; 0x20b4 <DIO_voidClearPinValue+0x60>
    209a:	5f c0       	rjmp	.+190    	; 0x215a <DIO_voidClearPinValue+0x106>
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	89 f1       	breq	.+98     	; 0x2108 <DIO_voidClearPinValue+0xb4>
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	91 05       	cpc	r25, r1
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <DIO_voidClearPinValue+0x5e>
    20b0:	40 c0       	rjmp	.+128    	; 0x2132 <DIO_voidClearPinValue+0xde>
    20b2:	53 c0       	rjmp	.+166    	; 0x215a <DIO_voidClearPinValue+0x106>
					{
						case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    20b4:	ab e3       	ldi	r26, 0x3B	; 59
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	eb e3       	ldi	r30, 0x3B	; 59
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_voidClearPinValue+0x7e>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_voidClearPinValue+0x7a>
    20d6:	80 95       	com	r24
    20d8:	84 23       	and	r24, r20
    20da:	8c 93       	st	X, r24
    20dc:	3e c0       	rjmp	.+124    	; 0x215a <DIO_voidClearPinValue+0x106>
						case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    20de:	a8 e3       	ldi	r26, 0x38	; 56
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e8 e3       	ldi	r30, 0x38	; 56
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_voidClearPinValue+0xa8>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_voidClearPinValue+0xa4>
    2100:	80 95       	com	r24
    2102:	84 23       	and	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	29 c0       	rjmp	.+82     	; 0x215a <DIO_voidClearPinValue+0x106>
						case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    2108:	a5 e3       	ldi	r26, 0x35	; 53
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e3       	ldi	r30, 0x35	; 53
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_voidClearPinValue+0xd2>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_voidClearPinValue+0xce>
    212a:	80 95       	com	r24
    212c:	84 23       	and	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	14 c0       	rjmp	.+40     	; 0x215a <DIO_voidClearPinValue+0x106>
						case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    2132:	a2 e3       	ldi	r26, 0x32	; 50
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 2e       	mov	r0, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_voidClearPinValue+0xfc>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <DIO_voidClearPinValue+0xf8>
    2154:	80 95       	com	r24
    2156:	84 23       	and	r24, r20
    2158:	8c 93       	st	X, r24


					  }


			}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <DIO_voidConnectPullUp>:




			void DIO_voidConnectPullUp(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8ConnectPullUp)
			{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <DIO_voidConnectPullUp+0x6>
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DIO_voidConnectPullUp+0x8>
    2170:	0f 92       	push	r0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	6a 83       	std	Y+2, r22	; 0x02
    217a:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	84 30       	cpi	r24, 0x04	; 4
    2180:	08 f0       	brcs	.+2      	; 0x2184 <DIO_voidConnectPullUp+0x1c>
    2182:	3d c1       	rjmp	.+634    	; 0x23fe <DIO_voidConnectPullUp+0x296>
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	88 30       	cpi	r24, 0x08	; 8
    2188:	08 f0       	brcs	.+2      	; 0x218c <DIO_voidConnectPullUp+0x24>
    218a:	39 c1       	rjmp	.+626    	; 0x23fe <DIO_voidConnectPullUp+0x296>
				{
					switch(Copy_u8PORT)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	3d 83       	std	Y+5, r19	; 0x05
    2194:	2c 83       	std	Y+4, r18	; 0x04
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	9d 81       	ldd	r25, Y+5	; 0x05
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	91 05       	cpc	r25, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <DIO_voidConnectPullUp+0x3a>
    21a0:	5d c0       	rjmp	.+186    	; 0x225c <DIO_voidConnectPullUp+0xf4>
    21a2:	2c 81       	ldd	r18, Y+4	; 0x04
    21a4:	3d 81       	ldd	r19, Y+5	; 0x05
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <DIO_voidConnectPullUp+0x4e>
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <DIO_voidConnectPullUp+0x68>
    21b4:	24 c1       	rjmp	.+584    	; 0x23fe <DIO_voidConnectPullUp+0x296>
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <DIO_voidConnectPullUp+0x5a>
    21c0:	93 c0       	rjmp	.+294    	; 0x22e8 <DIO_voidConnectPullUp+0x180>
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	83 30       	cpi	r24, 0x03	; 3
    21c8:	91 05       	cpc	r25, r1
    21ca:	09 f4       	brne	.+2      	; 0x21ce <DIO_voidConnectPullUp+0x66>
    21cc:	d3 c0       	rjmp	.+422    	; 0x2374 <DIO_voidConnectPullUp+0x20c>
    21ce:	17 c1       	rjmp	.+558    	; 0x23fe <DIO_voidConnectPullUp+0x296>
					{
					case DIO_PORTA:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	71 f5       	brne	.+92     	; 0x2232 <DIO_voidConnectPullUp+0xca>
						{
							SET_BIT(PORTA,Copy_u8PIN);
    21d6:	ab e3       	ldi	r26, 0x3B	; 59
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	eb e3       	ldi	r30, 0x3B	; 59
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_voidConnectPullUp+0x8a>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	2a 95       	dec	r18
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_voidConnectPullUp+0x86>
    21f6:	84 2b       	or	r24, r20
    21f8:	8c 93       	st	X, r24
							CLR_BIT(DDRA,Copy_u8PIN);
    21fa:	aa e3       	ldi	r26, 0x3A	; 58
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	ea e3       	ldi	r30, 0x3A	; 58
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_voidConnectPullUp+0xb0>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_voidConnectPullUp+0xac>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    2222:	a0 e5       	ldi	r26, 0x50	; 80
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e0 e5       	ldi	r30, 0x50	; 80
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8b 7f       	andi	r24, 0xFB	; 251
    222e:	8c 93       	st	X, r24
    2230:	e6 c0       	rjmp	.+460    	; 0x23fe <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTA,Copy_u8PIN);
    2232:	ab e3       	ldi	r26, 0x3B	; 59
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	eb e3       	ldi	r30, 0x3B	; 59
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_voidConnectPullUp+0xe8>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_voidConnectPullUp+0xe4>
    2254:	80 95       	com	r24
    2256:	84 23       	and	r24, r20
    2258:	8c 93       	st	X, r24
    225a:	d1 c0       	rjmp	.+418    	; 0x23fe <DIO_voidConnectPullUp+0x296>
						break;



		             case DIO_PORTB:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	71 f5       	brne	.+92     	; 0x22be <DIO_voidConnectPullUp+0x156>
						{
							SET_BIT(PORTB,Copy_u8PIN);
    2262:	a8 e3       	ldi	r26, 0x38	; 56
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e8 e3       	ldi	r30, 0x38	; 56
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_voidConnectPullUp+0x116>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	2a 95       	dec	r18
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_voidConnectPullUp+0x112>
    2282:	84 2b       	or	r24, r20
    2284:	8c 93       	st	X, r24
							CLR_BIT(DDRB,Copy_u8PIN);
    2286:	a7 e3       	ldi	r26, 0x37	; 55
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e7 e3       	ldi	r30, 0x37	; 55
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	48 2f       	mov	r20, r24
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 2e       	mov	r0, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_voidConnectPullUp+0x13c>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	0a 94       	dec	r0
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <DIO_voidConnectPullUp+0x138>
    22a8:	80 95       	com	r24
    22aa:	84 23       	and	r24, r20
    22ac:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    22ae:	a0 e5       	ldi	r26, 0x50	; 80
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e0 e5       	ldi	r30, 0x50	; 80
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8b 7f       	andi	r24, 0xFB	; 251
    22ba:	8c 93       	st	X, r24
    22bc:	a0 c0       	rjmp	.+320    	; 0x23fe <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTB,Copy_u8PIN);
    22be:	a8 e3       	ldi	r26, 0x38	; 56
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e8 e3       	ldi	r30, 0x38	; 56
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <DIO_voidConnectPullUp+0x174>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <DIO_voidConnectPullUp+0x170>
    22e0:	80 95       	com	r24
    22e2:	84 23       	and	r24, r20
    22e4:	8c 93       	st	X, r24
    22e6:	8b c0       	rjmp	.+278    	; 0x23fe <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTC:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	71 f5       	brne	.+92     	; 0x234a <DIO_voidConnectPullUp+0x1e2>
						{
							SET_BIT(PORTC,Copy_u8PIN);
    22ee:	a5 e3       	ldi	r26, 0x35	; 53
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e5 e3       	ldi	r30, 0x35	; 53
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 c0       	rjmp	.+4      	; 0x230a <DIO_voidConnectPullUp+0x1a2>
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	2a 95       	dec	r18
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <DIO_voidConnectPullUp+0x19e>
    230e:	84 2b       	or	r24, r20
    2310:	8c 93       	st	X, r24
							CLR_BIT(DDRC,Copy_u8PIN);
    2312:	a4 e3       	ldi	r26, 0x34	; 52
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e4 e3       	ldi	r30, 0x34	; 52
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_voidConnectPullUp+0x1c8>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <DIO_voidConnectPullUp+0x1c4>
    2334:	80 95       	com	r24
    2336:	84 23       	and	r24, r20
    2338:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    233a:	a0 e5       	ldi	r26, 0x50	; 80
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e0 e5       	ldi	r30, 0x50	; 80
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8b 7f       	andi	r24, 0xFB	; 251
    2346:	8c 93       	st	X, r24
    2348:	5a c0       	rjmp	.+180    	; 0x23fe <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTC,Copy_u8PIN);
    234a:	a5 e3       	ldi	r26, 0x35	; 53
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e5 e3       	ldi	r30, 0x35	; 53
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_voidConnectPullUp+0x200>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_voidConnectPullUp+0x1fc>
    236c:	80 95       	com	r24
    236e:	84 23       	and	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	45 c0       	rjmp	.+138    	; 0x23fe <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTD:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	71 f5       	brne	.+92     	; 0x23d6 <DIO_voidConnectPullUp+0x26e>
						{
							SET_BIT(PORTD,Copy_u8PIN);
    237a:	a2 e3       	ldi	r26, 0x32	; 50
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e2 e3       	ldi	r30, 0x32	; 50
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <DIO_voidConnectPullUp+0x22e>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	2a 95       	dec	r18
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <DIO_voidConnectPullUp+0x22a>
    239a:	84 2b       	or	r24, r20
    239c:	8c 93       	st	X, r24
							CLR_BIT(DDRD,Copy_u8PIN);
    239e:	a1 e3       	ldi	r26, 0x31	; 49
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e1 e3       	ldi	r30, 0x31	; 49
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 2e       	mov	r0, r18
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <DIO_voidConnectPullUp+0x254>
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <DIO_voidConnectPullUp+0x250>
    23c0:	80 95       	com	r24
    23c2:	84 23       	and	r24, r20
    23c4:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    23c6:	a0 e5       	ldi	r26, 0x50	; 80
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e0 e5       	ldi	r30, 0x50	; 80
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	8b 7f       	andi	r24, 0xFB	; 251
    23d2:	8c 93       	st	X, r24
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTD,Copy_u8PIN);
    23d6:	a2 e3       	ldi	r26, 0x32	; 50
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e2 e3       	ldi	r30, 0x32	; 50
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	48 2f       	mov	r20, r24
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 2e       	mov	r0, r18
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <DIO_voidConnectPullUp+0x28c>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <DIO_voidConnectPullUp+0x288>
    23f8:	80 95       	com	r24
    23fa:	84 23       	and	r24, r20
    23fc:	8c 93       	st	X, r24

				}



			}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <KPD_voidInit>:
#include"KPD_config.h"
#include"KPD_interface.h"
#include"KPD_private.h"

void KPD_voidInit(void)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	//THE ROWS IN INPUT PULL UP (HIGH PINS)
	DIO_voidConnectPullUp(KPD_PORT,KPD_R0,PIN_VAL_HIGH);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	64 e0       	ldi	r22, 0x04	; 4
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 b4 10 	call	0x2168	; 0x2168 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R1,PIN_VAL_HIGH);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	65 e0       	ldi	r22, 0x05	; 5
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 b4 10 	call	0x2168	; 0x2168 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R2,PIN_VAL_HIGH);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	66 e0       	ldi	r22, 0x06	; 6
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 b4 10 	call	0x2168	; 0x2168 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R3,PIN_VAL_HIGH);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	67 e0       	ldi	r22, 0x07	; 7
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 b4 10 	call	0x2168	; 0x2168 <DIO_voidConnectPullUp>

	/* THE COLS IS OUTPUT AND HAVE HIGH VALUE*/
	DIO_voidSetPinDirection(KPD_PORT,KPD_C0,PIN_DIR_OUTPUT);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C1,PIN_DIR_OUTPUT);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C2,PIN_DIR_OUTPUT);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C3,PIN_DIR_OUTPUT);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	63 e0       	ldi	r22, 0x03	; 3
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_PORT,KPD_C0,PIN_VAL_HIGH);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C1,PIN_VAL_HIGH);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C2,PIN_VAL_HIGH);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	62 e0       	ldi	r22, 0x02	; 2
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C3,PIN_VAL_HIGH);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	63 e0       	ldi	r22, 0x03	; 3
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>




}
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <KPD_u8GetPressed>:


u8 KPD_u8GetPressed(void)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	a7 97       	sbiw	r28, 0x27	; 39
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 Local_u8Row;
	u8 Local_u8Reading;
	u8 Local_u8Key=0;
    24a8:	1f 86       	std	Y+15, r1	; 0x0f

	u8 KPD_u8Values [MAX_ROW][MAX_COL] = KPD_VALUES;
    24aa:	ce 01       	movw	r24, r28
    24ac:	43 96       	adiw	r24, 0x13	; 19
    24ae:	9c a3       	std	Y+36, r25	; 0x24
    24b0:	8b a3       	std	Y+35, r24	; 0x23
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f1 e0       	ldi	r31, 0x01	; 1
    24b6:	fe a3       	std	Y+38, r31	; 0x26
    24b8:	ed a3       	std	Y+37, r30	; 0x25
    24ba:	f0 e1       	ldi	r31, 0x10	; 16
    24bc:	ff a3       	std	Y+39, r31	; 0x27
    24be:	ed a1       	ldd	r30, Y+37	; 0x25
    24c0:	fe a1       	ldd	r31, Y+38	; 0x26
    24c2:	00 80       	ld	r0, Z
    24c4:	8d a1       	ldd	r24, Y+37	; 0x25
    24c6:	9e a1       	ldd	r25, Y+38	; 0x26
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	9e a3       	std	Y+38, r25	; 0x26
    24cc:	8d a3       	std	Y+37, r24	; 0x25
    24ce:	eb a1       	ldd	r30, Y+35	; 0x23
    24d0:	fc a1       	ldd	r31, Y+36	; 0x24
    24d2:	00 82       	st	Z, r0
    24d4:	8b a1       	ldd	r24, Y+35	; 0x23
    24d6:	9c a1       	ldd	r25, Y+36	; 0x24
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	9c a3       	std	Y+36, r25	; 0x24
    24dc:	8b a3       	std	Y+35, r24	; 0x23
    24de:	9f a1       	ldd	r25, Y+39	; 0x27
    24e0:	91 50       	subi	r25, 0x01	; 1
    24e2:	9f a3       	std	Y+39, r25	; 0x27
    24e4:	ef a1       	ldd	r30, Y+39	; 0x27
    24e6:	ee 23       	and	r30, r30
    24e8:	51 f7       	brne	.-44     	; 0x24be <KPD_u8GetPressed+0x2a>

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
    24ea:	1a 8a       	std	Y+18, r1	; 0x12
    24ec:	b1 c0       	rjmp	.+354    	; 0x2650 <KPD_u8GetPressed+0x1bc>
	{
		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_LOW); // Put GND in each Column
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	6a 89       	ldd	r22, Y+18	; 0x12
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>

		for (Local_u8Row = 0 ; Local_u8Row <4 ; Local_u8Row++)
    24f8:	19 8a       	std	Y+17, r1	; 0x11
    24fa:	9e c0       	rjmp	.+316    	; 0x2638 <KPD_u8GetPressed+0x1a4>
		{
			Local_u8Reading = DIO_voidGetPinValue(KPD_PORT,Local_u8Row + 4);
    24fc:	89 89       	ldd	r24, Y+17	; 0x11
    24fe:	98 2f       	mov	r25, r24
    2500:	9c 5f       	subi	r25, 0xFC	; 252
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	69 2f       	mov	r22, r25
    2506:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <DIO_voidGetPinValue>
    250a:	88 8b       	std	Y+16, r24	; 0x10
			// to get the values of each switch

			if (Local_u8Reading == PIN_VAL_LOW)
    250c:	88 89       	ldd	r24, Y+16	; 0x10
    250e:	88 23       	and	r24, r24
    2510:	09 f0       	breq	.+2      	; 0x2514 <KPD_u8GetPressed+0x80>
    2512:	86 c0       	rjmp	.+268    	; 0x2620 <KPD_u8GetPressed+0x18c>
			{
				Local_u8Key = KPD_u8Values [Local_u8Row][Local_u8Col];
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8a 89       	ldd	r24, Y+18	; 0x12
    251c:	48 2f       	mov	r20, r24
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	82 0f       	add	r24, r18
    252e:	93 1f       	adc	r25, r19
    2530:	84 0f       	add	r24, r20
    2532:	95 1f       	adc	r25, r21
    2534:	fc 01       	movw	r30, r24
    2536:	72 96       	adiw	r30, 0x12	; 18
    2538:	80 81       	ld	r24, Z
    253a:	8f 87       	std	Y+15, r24	; 0x0f
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e2       	ldi	r26, 0x20	; 32
    2542:	b1 e4       	ldi	r27, 0x41	; 65
    2544:	8b 87       	std	Y+11, r24	; 0x0b
    2546:	9c 87       	std	Y+12, r25	; 0x0c
    2548:	ad 87       	std	Y+13, r26	; 0x0d
    254a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8f 83       	std	Y+7, r24	; 0x07
    2566:	98 87       	std	Y+8, r25	; 0x08
    2568:	a9 87       	std	Y+9, r26	; 0x09
    256a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <KPD_u8GetPressed+0xfa>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	3f c0       	rjmp	.+126    	; 0x260c <KPD_u8GetPressed+0x178>
	else if (__tmp > 65535)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <KPD_u8GetPressed+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <KPD_u8GetPressed+0x15a>
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <KPD_u8GetPressed+0x148>
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <KPD_u8GetPressed+0x13c>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <KPD_u8GetPressed+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <KPD_u8GetPressed+0x184>
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
			}

			while (DIO_voidGetPinValue(KPD_PORT,Local_u8Row +4) == PIN_VAL_LOW)
    2620:	89 89       	ldd	r24, Y+17	; 0x11
    2622:	98 2f       	mov	r25, r24
    2624:	9c 5f       	subi	r25, 0xFC	; 252
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	69 2f       	mov	r22, r25
    262a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <DIO_voidGetPinValue>
    262e:	88 23       	and	r24, r24
    2630:	b9 f3       	breq	.-18     	; 0x2620 <KPD_u8GetPressed+0x18c>

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
	{
		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_LOW); // Put GND in each Column

		for (Local_u8Row = 0 ; Local_u8Row <4 ; Local_u8Row++)
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	89 8b       	std	Y+17, r24	; 0x11
    2638:	89 89       	ldd	r24, Y+17	; 0x11
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	08 f4       	brcc	.+2      	; 0x2640 <KPD_u8GetPressed+0x1ac>
    263e:	5e cf       	rjmp	.-324    	; 0x24fc <KPD_u8GetPressed+0x68>
			{

			}
		}

		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	6a 89       	ldd	r22, Y+18	; 0x12
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	u8 Local_u8Reading;
	u8 Local_u8Key=0;

	u8 KPD_u8Values [MAX_ROW][MAX_COL] = KPD_VALUES;

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
    264a:	8a 89       	ldd	r24, Y+18	; 0x12
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	8a 8b       	std	Y+18, r24	; 0x12
    2650:	8a 89       	ldd	r24, Y+18	; 0x12
    2652:	84 30       	cpi	r24, 0x04	; 4
    2654:	08 f4       	brcc	.+2      	; 0x2658 <KPD_u8GetPressed+0x1c4>
    2656:	4b cf       	rjmp	.-362    	; 0x24ee <KPD_u8GetPressed+0x5a>
			}
		}

		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
	}
	return Local_u8Key;
    2658:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    265a:	a7 96       	adiw	r28, 0x27	; 39
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <main>:
void Stepper_Motor(void);
void DC_Motor(void);


void main(void)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	60 97       	sbiw	r28, 0x10	; 16
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61

CLCD_voidInit();
    2680:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidInit>
KPD_voidInit();
    2684:	0e 94 07 12 	call	0x240e	; 0x240e <KPD_voidInit>

DIO_voidSetPortDirection(DIO_PORTD,PORT_DIR_OUTPUT);
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	6f ef       	ldi	r22, 0xFF	; 255
    268c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_voidSetPortDirection>

CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_4);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	64 e0       	ldi	r22, 0x04	; 4
    2694:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
CLCD_voidSendString("Welcome");
    2698:	80 e6       	ldi	r24, 0x60	; 96
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1));
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
CLCD_voidSendString("To our system");
    26a8:	88 e6       	ldi	r24, 0x68	; 104
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	aa ef       	ldi	r26, 0xFA	; 250
    26b6:	b4 e4       	ldi	r27, 0x44	; 68
    26b8:	8b 87       	std	Y+11, r24	; 0x0b
    26ba:	9c 87       	std	Y+12, r25	; 0x0c
    26bc:	ad 87       	std	Y+13, r26	; 0x0d
    26be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	a9 87       	std	Y+9, r26	; 0x09
    26de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <main+0x96>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <main+0x114>
	else if (__tmp > 65535)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <main+0xf6>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0xe4>
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <main+0xd8>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <main+0x120>
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2000);
CLCD_voidClearScreen();
    2794:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>

while(1)
{
	CLCD_voidSendString("press 1 for DC");
    2798:	86 e7       	ldi	r24, 0x76	; 118
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
	CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
	CLCD_voidSendString("press 2 for step");
    27a8:	85 e8       	ldi	r24, 0x85	; 133
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>


	reading=KPD_u8GetPressed();
    27b0:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    27b4:	80 93 60 01 	sts	0x0160, r24

	switch(reading)
    27b8:	80 91 60 01 	lds	r24, 0x0160
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	38 8b       	std	Y+16, r19	; 0x10
    27c2:	2f 87       	std	Y+15, r18	; 0x0f
    27c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c6:	98 89       	ldd	r25, Y+16	; 0x10
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	91 05       	cpc	r25, r1
    27cc:	31 f0       	breq	.+12     	; 0x27da <main+0x16e>
    27ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    27d0:	38 89       	ldd	r19, Y+16	; 0x10
    27d2:	22 30       	cpi	r18, 0x02	; 2
    27d4:	31 05       	cpc	r19, r1
    27d6:	39 f0       	breq	.+14     	; 0x27e6 <main+0x17a>
    27d8:	df cf       	rjmp	.-66     	; 0x2798 <main+0x12c>
	{
	case 1:
		flag=1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	80 93 61 01 	sts	0x0161, r24

       DC_Motor();
    27e0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DC_Motor>
    27e4:	d9 cf       	rjmp	.-78     	; 0x2798 <main+0x12c>
		break;

	case 2:
		flag=1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 61 01 	sts	0x0161, r24
       Stepper_Motor();
    27ec:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Stepper_Motor>
    27f0:	d3 cf       	rjmp	.-90     	; 0x2798 <main+0x12c>

000027f2 <DC_Motor>:

}


void DC_Motor(void)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	ac 97       	sbiw	r28, 0x2c	; 44
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	f0 c1       	rjmp	.+992    	; 0x2be8 <DC_Motor+0x3f6>


	while(flag==1)
	{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,PIN_VAL_LOW);
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,PIN_VAL_LOW);
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
		reading=0;
    281c:	10 92 60 01 	sts	0x0160, r1
		CLCD_voidClearScreen();
    2820:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
		CLCD_voidSendString("Welcom to DC");
    2824:	86 e9       	ldi	r24, 0x96	; 150
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	aa ef       	ldi	r26, 0xFA	; 250
    2832:	b4 e4       	ldi	r27, 0x44	; 68
    2834:	8f a3       	std	Y+39, r24	; 0x27
    2836:	98 a7       	std	Y+40, r25	; 0x28
    2838:	a9 a7       	std	Y+41, r26	; 0x29
    283a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6f a1       	ldd	r22, Y+39	; 0x27
    283e:	78 a5       	ldd	r23, Y+40	; 0x28
    2840:	89 a5       	ldd	r24, Y+41	; 0x29
    2842:	9a a5       	ldd	r25, Y+42	; 0x2a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8b a3       	std	Y+35, r24	; 0x23
    2856:	9c a3       	std	Y+36, r25	; 0x24
    2858:	ad a3       	std	Y+37, r26	; 0x25
    285a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    285c:	6b a1       	ldd	r22, Y+35	; 0x23
    285e:	7c a1       	ldd	r23, Y+36	; 0x24
    2860:	8d a1       	ldd	r24, Y+37	; 0x25
    2862:	9e a1       	ldd	r25, Y+38	; 0x26
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <DC_Motor+0x8c>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9a a3       	std	Y+34, r25	; 0x22
    287a:	89 a3       	std	Y+33, r24	; 0x21
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <DC_Motor+0x10a>
	else if (__tmp > 65535)
    287e:	6b a1       	ldd	r22, Y+35	; 0x23
    2880:	7c a1       	ldd	r23, Y+36	; 0x24
    2882:	8d a1       	ldd	r24, Y+37	; 0x25
    2884:	9e a1       	ldd	r25, Y+38	; 0x26
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <DC_Motor+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6f a1       	ldd	r22, Y+39	; 0x27
    2898:	78 a5       	ldd	r23, Y+40	; 0x28
    289a:	89 a5       	ldd	r24, Y+41	; 0x29
    289c:	9a a5       	ldd	r25, Y+42	; 0x2a
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	0f c0       	rjmp	.+30     	; 0x28de <DC_Motor+0xec>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	98 a3       	std	Y+32, r25	; 0x20
    28c6:	8f 8f       	std	Y+31, r24	; 0x1f
    28c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ca:	98 a1       	ldd	r25, Y+32	; 0x20
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <DC_Motor+0xda>
    28d0:	98 a3       	std	Y+32, r25	; 0x20
    28d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9a a3       	std	Y+34, r25	; 0x22
    28dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	89 a1       	ldd	r24, Y+33	; 0x21
    28e0:	9a a1       	ldd	r25, Y+34	; 0x22
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <DC_Motor+0xce>
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <DC_Motor+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ea:	7c a1       	ldd	r23, Y+36	; 0x24
    28ec:	8d a1       	ldd	r24, Y+37	; 0x25
    28ee:	9e a1       	ldd	r25, Y+38	; 0x26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	9e 8f       	std	Y+30, r25	; 0x1e
    2902:	8d 8f       	std	Y+29, r24	; 0x1d
    2904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <DC_Motor+0x116>
    290c:	9e 8f       	std	Y+30, r25	; 0x1e
    290e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		CLCD_voidClearScreen();
    2910:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
		CLCD_voidSendString("Press 1 for CW");
    2914:	83 ea       	ldi	r24, 0xA3	; 163
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
		CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
		CLCD_voidSendString("Press 2 for ACW");
    2924:	82 eb       	ldi	r24, 0xB2	; 178
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	aa e7       	ldi	r26, 0x7A	; 122
    2932:	b4 e4       	ldi	r27, 0x44	; 68
    2934:	89 8f       	std	Y+25, r24	; 0x19
    2936:	9a 8f       	std	Y+26, r25	; 0x1a
    2938:	ab 8f       	std	Y+27, r26	; 0x1b
    293a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	69 8d       	ldd	r22, Y+25	; 0x19
    293e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a ef       	ldi	r20, 0xFA	; 250
    294a:	54 e4       	ldi	r21, 0x44	; 68
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8d 8b       	std	Y+21, r24	; 0x15
    2956:	9e 8b       	std	Y+22, r25	; 0x16
    2958:	af 8b       	std	Y+23, r26	; 0x17
    295a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    295c:	6d 89       	ldd	r22, Y+21	; 0x15
    295e:	7e 89       	ldd	r23, Y+22	; 0x16
    2960:	8f 89       	ldd	r24, Y+23	; 0x17
    2962:	98 8d       	ldd	r25, Y+24	; 0x18
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <DC_Motor+0x18c>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <DC_Motor+0x20a>
	else if (__tmp > 65535)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <DC_Motor+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	69 8d       	ldd	r22, Y+25	; 0x19
    2998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    299a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    299c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	0f c0       	rjmp	.+30     	; 0x29de <DC_Motor+0x1ec>
    29c0:	88 ec       	ldi	r24, 0xC8	; 200
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9a 8b       	std	Y+18, r25	; 0x12
    29c6:	89 8b       	std	Y+17, r24	; 0x11
    29c8:	89 89       	ldd	r24, Y+17	; 0x11
    29ca:	9a 89       	ldd	r25, Y+18	; 0x12
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <DC_Motor+0x1da>
    29d0:	9a 8b       	std	Y+18, r25	; 0x12
    29d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8b 89       	ldd	r24, Y+19	; 0x13
    29d6:	9c 89       	ldd	r25, Y+20	; 0x14
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <DC_Motor+0x1ce>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <DC_Motor+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	6d 89       	ldd	r22, Y+21	; 0x15
    29ea:	7e 89       	ldd	r23, Y+22	; 0x16
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	98 8d       	ldd	r25, Y+24	; 0x18
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	8b 89       	ldd	r24, Y+19	; 0x13
    29fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2a00:	98 8b       	std	Y+16, r25	; 0x10
    2a02:	8f 87       	std	Y+15, r24	; 0x0f
    2a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a06:	98 89       	ldd	r25, Y+16	; 0x10
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <DC_Motor+0x216>
    2a0c:	98 8b       	std	Y+16, r25	; 0x10
    2a0e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		CLCD_voidClearScreen();
    2a10:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
		CLCD_voidSendString("Press 3 for back");
    2a14:	82 ec       	ldi	r24, 0xC2	; 194
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	aa e7       	ldi	r26, 0x7A	; 122
    2a22:	b4 e4       	ldi	r27, 0x44	; 68
    2a24:	8b 87       	std	Y+11, r24	; 0x0b
    2a26:	9c 87       	std	Y+12, r25	; 0x0c
    2a28:	ad 87       	std	Y+13, r26	; 0x0d
    2a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8f 83       	std	Y+7, r24	; 0x07
    2a46:	98 87       	std	Y+8, r25	; 0x08
    2a48:	a9 87       	std	Y+9, r26	; 0x09
    2a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <DC_Motor+0x27c>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <DC_Motor+0x2fa>
	else if (__tmp > 65535)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <DC_Motor+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <DC_Motor+0x2dc>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <DC_Motor+0x2ca>
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <DC_Motor+0x2be>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <DC_Motor+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <DC_Motor+0x306>
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
		CLCD_voidClearScreen();
    2b00:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>

		do{
			reading=KPD_u8GetPressed();
    2b04:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    2b08:	80 93 60 01 	sts	0x0160, r24

			switch(reading)
    2b0c:	80 91 60 01 	lds	r24, 0x0160
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	3c a7       	std	Y+44, r19	; 0x2c
    2b16:	2b a7       	std	Y+43, r18	; 0x2b
    2b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	91 05       	cpc	r25, r1
    2b20:	99 f1       	breq	.+102    	; 0x2b88 <DC_Motor+0x396>
    2b22:	2b a5       	ldd	r18, Y+43	; 0x2b
    2b24:	3c a5       	ldd	r19, Y+44	; 0x2c
    2b26:	23 30       	cpi	r18, 0x03	; 3
    2b28:	31 05       	cpc	r19, r1
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <DC_Motor+0x33c>
    2b2c:	54 c0       	rjmp	.+168    	; 0x2bd6 <DC_Motor+0x3e4>
    2b2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b30:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	91 05       	cpc	r25, r1
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <DC_Motor+0x348>
    2b38:	52 c0       	rjmp	.+164    	; 0x2bde <DC_Motor+0x3ec>
			{

			case 1:
				CLCD_voidSendString("Rotate CW");
    2b3a:	83 ed       	ldi	r24, 0xD3	; 211
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
				CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
				CLCD_voidSendString("Press c to back");
    2b4a:	8d ed       	ldi	r24, 0xDD	; 221
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2b52:	12 c0       	rjmp	.+36     	; 0x2b78 <DC_Motor+0x386>

				while(reading!='&')
				{
					reading=KPD_u8GetPressed();
    2b54:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    2b58:	80 93 60 01 	sts	0x0160, r24
					if(reading=='&')break;
    2b5c:	80 91 60 01 	lds	r24, 0x0160
    2b60:	86 32       	cpi	r24, 0x26	; 38
    2b62:	71 f0       	breq	.+28     	; 0x2b80 <DC_Motor+0x38e>
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,PIN_VAL_HIGH);
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,PIN_VAL_LOW);
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
			case 1:
				CLCD_voidSendString("Rotate CW");
				CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
				CLCD_voidSendString("Press c to back");

				while(reading!='&')
    2b78:	80 91 60 01 	lds	r24, 0x0160
    2b7c:	86 32       	cpi	r24, 0x26	; 38
    2b7e:	51 f7       	brne	.-44     	; 0x2b54 <DC_Motor+0x362>
					if(reading=='&')break;
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,PIN_VAL_HIGH);
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,PIN_VAL_LOW);

				}
				flag=1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	80 93 61 01 	sts	0x0161, r24
    2b86:	2b c0       	rjmp	.+86     	; 0x2bde <DC_Motor+0x3ec>
				break;


			case 2:
							CLCD_voidSendString("Rotate ACW");
    2b88:	8d ee       	ldi	r24, 0xED	; 237
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
							CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
							CLCD_voidSendString("Press c to back");
    2b98:	8d ed       	ldi	r24, 0xDD	; 221
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2ba0:	12 c0       	rjmp	.+36     	; 0x2bc6 <DC_Motor+0x3d4>

							while(reading!='&')
							{
								reading=KPD_u8GetPressed();
    2ba2:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    2ba6:	80 93 60 01 	sts	0x0160, r24
								if(reading=='&')break;
    2baa:	80 91 60 01 	lds	r24, 0x0160
    2bae:	86 32       	cpi	r24, 0x26	; 38
    2bb0:	71 f0       	breq	.+28     	; 0x2bce <DC_Motor+0x3dc>
								DIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,PIN_VAL_LOW);
    2bb2:	83 e0       	ldi	r24, 0x03	; 3
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
								DIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,PIN_VAL_HIGH);
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
			case 2:
							CLCD_voidSendString("Rotate ACW");
							CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
							CLCD_voidSendString("Press c to back");

							while(reading!='&')
    2bc6:	80 91 60 01 	lds	r24, 0x0160
    2bca:	86 32       	cpi	r24, 0x26	; 38
    2bcc:	51 f7       	brne	.-44     	; 0x2ba2 <DC_Motor+0x3b0>
								if(reading=='&')break;
								DIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,PIN_VAL_LOW);
								DIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,PIN_VAL_HIGH);

							}
							flag=1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	80 93 61 01 	sts	0x0161, r24
    2bd4:	04 c0       	rjmp	.+8      	; 0x2bde <DC_Motor+0x3ec>
							break;

			case 3:
				CLCD_voidClearScreen();
    2bd6:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
				flag=0;
    2bda:	10 92 61 01 	sts	0x0161, r1


			}


		}while(reading=='\0');
    2bde:	80 91 60 01 	lds	r24, 0x0160
    2be2:	88 23       	and	r24, r24
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <DC_Motor+0x3f6>
    2be6:	8e cf       	rjmp	.-228    	; 0x2b04 <DC_Motor+0x312>

void DC_Motor(void)
{


	while(flag==1)
    2be8:	80 91 61 01 	lds	r24, 0x0161
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <DC_Motor+0x400>
    2bf0:	0b ce       	rjmp	.-1002   	; 0x2808 <DC_Motor+0x16>


	}


}
    2bf2:	ac 96       	adiw	r28, 0x2c	; 44
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <Stepper_Motor>:




void Stepper_Motor(void)
{
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	cc 59       	subi	r28, 0x9C	; 156
    2c12:	d0 40       	sbci	r29, 0x00	; 0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <Stepper_Motor+0xfa6>
	while(flag==1)
	{
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_LOW);
    2c22:	83 e0       	ldi	r24, 0x03	; 3
    2c24:	62 e0       	ldi	r22, 0x02	; 2
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_LOW);
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	63 e0       	ldi	r22, 0x03	; 3
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
    2c36:	83 e0       	ldi	r24, 0x03	; 3
    2c38:	64 e0       	ldi	r22, 0x04	; 4
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>

	reading=0;
    2c4a:	10 92 60 01 	sts	0x0160, r1
			CLCD_voidClearScreen();
    2c4e:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
			CLCD_voidSendString("Welcom to Step");
    2c52:	88 ef       	ldi	r24, 0xF8	; 248
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e9 56       	subi	r30, 0x69	; 105
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	aa ef       	ldi	r26, 0xFA	; 250
    2c66:	b4 e4       	ldi	r27, 0x44	; 68
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	8e 01       	movw	r16, r28
    2c72:	0d 56       	subi	r16, 0x6D	; 109
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e9 56       	subi	r30, 0x69	; 105
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4a ef       	ldi	r20, 0xFA	; 250
    2c8a:	54 e4       	ldi	r21, 0x44	; 68
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	f8 01       	movw	r30, r16
    2c96:	80 83       	st	Z, r24
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	a2 83       	std	Z+2, r26	; 0x02
    2c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 56       	subi	r30, 0x6D	; 109
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	44 f4       	brge	.+16     	; 0x2ccc <Stepper_Motor+0xc8>
		__ticks = 1;
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ef 56       	subi	r30, 0x6F	; 111
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	64 c0       	rjmp	.+200    	; 0x2d94 <Stepper_Motor+0x190>
	else if (__tmp > 65535)
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 56       	subi	r30, 0x6D	; 109
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	0c f0       	brlt	.+2      	; 0x2cec <Stepper_Motor+0xe8>
    2cea:	43 c0       	rjmp	.+134    	; 0x2d72 <Stepper_Motor+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 56       	subi	r30, 0x69	; 105
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e2       	ldi	r20, 0x20	; 32
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	8e 01       	movw	r16, r28
    2d0c:	0f 56       	subi	r16, 0x6F	; 111
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
    2d22:	1f c0       	rjmp	.+62     	; 0x2d62 <Stepper_Motor+0x15e>
    2d24:	fe 01       	movw	r30, r28
    2d26:	e1 57       	subi	r30, 0x71	; 113
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	88 ec       	ldi	r24, 0xC8	; 200
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	fe 01       	movw	r30, r28
    2d34:	e1 57       	subi	r30, 0x71	; 113
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <Stepper_Motor+0x138>
    2d40:	fe 01       	movw	r30, r28
    2d42:	e1 57       	subi	r30, 0x71	; 113
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4a:	de 01       	movw	r26, r28
    2d4c:	af 56       	subi	r26, 0x6F	; 111
    2d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d50:	fe 01       	movw	r30, r28
    2d52:	ef 56       	subi	r30, 0x6F	; 111
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	9c 93       	st	X, r25
    2d60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	fe 01       	movw	r30, r28
    2d64:	ef 56       	subi	r30, 0x6F	; 111
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	d1 f6       	brne	.-76     	; 0x2d24 <Stepper_Motor+0x120>
    2d70:	27 c0       	rjmp	.+78     	; 0x2dc0 <Stepper_Motor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	8e 01       	movw	r16, r28
    2d74:	0f 56       	subi	r16, 0x6F	; 111
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 56       	subi	r30, 0x6D	; 109
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	f8 01       	movw	r30, r16
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	de 01       	movw	r26, r28
    2d96:	a3 57       	subi	r26, 0x73	; 115
    2d98:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ef 56       	subi	r30, 0x6F	; 111
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	8d 93       	st	X+, r24
    2da6:	9c 93       	st	X, r25
    2da8:	fe 01       	movw	r30, r28
    2daa:	e3 57       	subi	r30, 0x73	; 115
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <Stepper_Motor+0x1ae>
    2db6:	fe 01       	movw	r30, r28
    2db8:	e3 57       	subi	r30, 0x73	; 115
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
			_delay_ms(2000);
			CLCD_voidClearScreen();
    2dc0:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
			CLCD_voidSendString("Press 1 for CW");
    2dc4:	83 ea       	ldi	r24, 0xA3	; 163
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
			CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
			CLCD_voidSendString("Press 2 for ACW");
    2dd4:	82 eb       	ldi	r24, 0xB2	; 178
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e7 57       	subi	r30, 0x77	; 119
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	aa e7       	ldi	r26, 0x7A	; 122
    2de8:	b4 e4       	ldi	r27, 0x44	; 68
    2dea:	80 83       	st	Z, r24
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	a2 83       	std	Z+2, r26	; 0x02
    2df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	8e 01       	movw	r16, r28
    2df4:	0b 57       	subi	r16, 0x7B	; 123
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e7 57       	subi	r30, 0x77	; 119
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 83       	st	Z, r24
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	a2 83       	std	Z+2, r26	; 0x02
    2e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e20:	fe 01       	movw	r30, r28
    2e22:	eb 57       	subi	r30, 0x7B	; 123
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	44 f4       	brge	.+16     	; 0x2e4e <Stepper_Motor+0x24a>
		__ticks = 1;
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ed 57       	subi	r30, 0x7D	; 125
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	80 83       	st	Z, r24
    2e4c:	64 c0       	rjmp	.+200    	; 0x2f16 <Stepper_Motor+0x312>
	else if (__tmp > 65535)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	eb 57       	subi	r30, 0x7B	; 123
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	0c f0       	brlt	.+2      	; 0x2e6e <Stepper_Motor+0x26a>
    2e6c:	43 c0       	rjmp	.+134    	; 0x2ef4 <Stepper_Motor+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e7 57       	subi	r30, 0x77	; 119
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e2       	ldi	r20, 0x20	; 32
    2e82:	51 e4       	ldi	r21, 0x41	; 65
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8e 01       	movw	r16, r28
    2e8e:	0d 57       	subi	r16, 0x7D	; 125
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	1f c0       	rjmp	.+62     	; 0x2ee4 <Stepper_Motor+0x2e0>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 57       	subi	r30, 0x7F	; 127
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	88 ec       	ldi	r24, 0xC8	; 200
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ef 57       	subi	r30, 0x7F	; 127
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <Stepper_Motor+0x2ba>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ef 57       	subi	r30, 0x7F	; 127
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	de 01       	movw	r26, r28
    2ece:	ad 57       	subi	r26, 0x7D	; 125
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 57       	subi	r30, 0x7D	; 125
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	9c 93       	st	X, r25
    2ee2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ed 57       	subi	r30, 0x7D	; 125
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	d1 f6       	brne	.-76     	; 0x2ea6 <Stepper_Motor+0x2a2>
    2ef2:	27 c0       	rjmp	.+78     	; 0x2f42 <Stepper_Motor+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	0d 57       	subi	r16, 0x7D	; 125
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	fe 01       	movw	r30, r28
    2efc:	eb 57       	subi	r30, 0x7B	; 123
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	f8 01       	movw	r30, r16
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	de 01       	movw	r26, r28
    2f18:	a1 58       	subi	r26, 0x81	; 129
    2f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ed 57       	subi	r30, 0x7D	; 125
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	8d 93       	st	X+, r24
    2f28:	9c 93       	st	X, r25
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e1 58       	subi	r30, 0x81	; 129
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <Stepper_Motor+0x330>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e1 58       	subi	r30, 0x81	; 129
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
			_delay_ms(1000);
			CLCD_voidClearScreen();
    2f42:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
			CLCD_voidSendString("Press 3 for back");
    2f46:	82 ec       	ldi	r24, 0xC2	; 194
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e5 58       	subi	r30, 0x85	; 133
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	aa e7       	ldi	r26, 0x7A	; 122
    2f5a:	b4 e4       	ldi	r27, 0x44	; 68
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	8e 01       	movw	r16, r28
    2f66:	09 58       	subi	r16, 0x89	; 137
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e5 58       	subi	r30, 0x85	; 133
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a ef       	ldi	r20, 0xFA	; 250
    2f7e:	54 e4       	ldi	r21, 0x44	; 68
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	f8 01       	movw	r30, r16
    2f8a:	80 83       	st	Z, r24
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	a2 83       	std	Z+2, r26	; 0x02
    2f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e9 58       	subi	r30, 0x89	; 137
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fac:	88 23       	and	r24, r24
    2fae:	44 f4       	brge	.+16     	; 0x2fc0 <Stepper_Motor+0x3bc>
		__ticks = 1;
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 58       	subi	r30, 0x8B	; 139
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	80 83       	st	Z, r24
    2fbe:	64 c0       	rjmp	.+200    	; 0x3088 <Stepper_Motor+0x484>
	else if (__tmp > 65535)
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e9 58       	subi	r30, 0x89	; 137
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	3f ef       	ldi	r19, 0xFF	; 255
    2fd2:	4f e7       	ldi	r20, 0x7F	; 127
    2fd4:	57 e4       	ldi	r21, 0x47	; 71
    2fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fda:	18 16       	cp	r1, r24
    2fdc:	0c f0       	brlt	.+2      	; 0x2fe0 <Stepper_Motor+0x3dc>
    2fde:	43 c0       	rjmp	.+134    	; 0x3066 <Stepper_Motor+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 58       	subi	r30, 0x85	; 133
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	60 81       	ld	r22, Z
    2fe8:	71 81       	ldd	r23, Z+1	; 0x01
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	8e 01       	movw	r16, r28
    3000:	0b 58       	subi	r16, 0x8B	; 139
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	f8 01       	movw	r30, r16
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	1f c0       	rjmp	.+62     	; 0x3056 <Stepper_Motor+0x452>
    3018:	fe 01       	movw	r30, r28
    301a:	ed 58       	subi	r30, 0x8D	; 141
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	88 ec       	ldi	r24, 0xC8	; 200
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
    3026:	fe 01       	movw	r30, r28
    3028:	ed 58       	subi	r30, 0x8D	; 141
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <Stepper_Motor+0x42c>
    3034:	fe 01       	movw	r30, r28
    3036:	ed 58       	subi	r30, 0x8D	; 141
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303e:	de 01       	movw	r26, r28
    3040:	ab 58       	subi	r26, 0x8B	; 139
    3042:	bf 4f       	sbci	r27, 0xFF	; 255
    3044:	fe 01       	movw	r30, r28
    3046:	eb 58       	subi	r30, 0x8B	; 139
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	9c 93       	st	X, r25
    3054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	fe 01       	movw	r30, r28
    3058:	eb 58       	subi	r30, 0x8B	; 139
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	d1 f6       	brne	.-76     	; 0x3018 <Stepper_Motor+0x414>
    3064:	27 c0       	rjmp	.+78     	; 0x30b4 <Stepper_Motor+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	8e 01       	movw	r16, r28
    3068:	0b 58       	subi	r16, 0x8B	; 139
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	fe 01       	movw	r30, r28
    306e:	e9 58       	subi	r30, 0x89	; 137
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	f8 01       	movw	r30, r16
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	de 01       	movw	r26, r28
    308a:	af 58       	subi	r26, 0x8F	; 143
    308c:	bf 4f       	sbci	r27, 0xFF	; 255
    308e:	fe 01       	movw	r30, r28
    3090:	eb 58       	subi	r30, 0x8B	; 139
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	8d 93       	st	X+, r24
    309a:	9c 93       	st	X, r25
    309c:	fe 01       	movw	r30, r28
    309e:	ef 58       	subi	r30, 0x8F	; 143
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <Stepper_Motor+0x4a2>
    30aa:	fe 01       	movw	r30, r28
    30ac:	ef 58       	subi	r30, 0x8F	; 143
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
					_delay_ms(1000);
			CLCD_voidClearScreen();
    30b4:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>

			do{

				reading=KPD_u8GetPressed();
    30b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    30bc:	80 93 60 01 	sts	0x0160, r24

				switch(reading)
    30c0:	80 91 60 01 	lds	r24, 0x0160
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	c5 56       	subi	r28, 0x65	; 101
    30ca:	df 4f       	sbci	r29, 0xFF	; 255
    30cc:	39 83       	std	Y+1, r19	; 0x01
    30ce:	28 83       	st	Y, r18
    30d0:	cb 59       	subi	r28, 0x9B	; 155
    30d2:	d0 40       	sbci	r29, 0x00	; 0
    30d4:	c5 56       	subi	r28, 0x65	; 101
    30d6:	df 4f       	sbci	r29, 0xFF	; 255
    30d8:	88 81       	ld	r24, Y
    30da:	99 81       	ldd	r25, Y+1	; 0x01
    30dc:	cb 59       	subi	r28, 0x9B	; 155
    30de:	d0 40       	sbci	r29, 0x00	; 0
    30e0:	82 30       	cpi	r24, 0x02	; 2
    30e2:	91 05       	cpc	r25, r1
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <Stepper_Motor+0x4e4>
    30e6:	21 c3       	rjmp	.+1602   	; 0x372a <Stepper_Motor+0xb26>
    30e8:	c5 56       	subi	r28, 0x65	; 101
    30ea:	df 4f       	sbci	r29, 0xFF	; 255
    30ec:	e8 81       	ld	r30, Y
    30ee:	f9 81       	ldd	r31, Y+1	; 0x01
    30f0:	cb 59       	subi	r28, 0x9B	; 155
    30f2:	d0 40       	sbci	r29, 0x00	; 0
    30f4:	e3 30       	cpi	r30, 0x03	; 3
    30f6:	f1 05       	cpc	r31, r1
    30f8:	09 f4       	brne	.+2      	; 0x30fc <Stepper_Motor+0x4f8>
    30fa:	4e c5       	rjmp	.+2716   	; 0x3b98 <Stepper_Motor+0xf94>
    30fc:	c5 56       	subi	r28, 0x65	; 101
    30fe:	df 4f       	sbci	r29, 0xFF	; 255
    3100:	28 81       	ld	r18, Y
    3102:	39 81       	ldd	r19, Y+1	; 0x01
    3104:	cb 59       	subi	r28, 0x9B	; 155
    3106:	d0 40       	sbci	r29, 0x00	; 0
    3108:	21 30       	cpi	r18, 0x01	; 1
    310a:	31 05       	cpc	r19, r1
    310c:	09 f0       	breq	.+2      	; 0x3110 <Stepper_Motor+0x50c>
    310e:	48 c5       	rjmp	.+2704   	; 0x3ba0 <Stepper_Motor+0xf9c>
				{
				case 1:
					CLCD_voidSendString("Rotate CW");
    3110:	83 ed       	ldi	r24, 0xD3	; 211
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
					CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
					CLCD_voidSendString("Press c to back");
    3120:	8d ed       	ldi	r24, 0xDD	; 221
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    3128:	f7 c2       	rjmp	.+1518   	; 0x3718 <Stepper_Motor+0xb14>

					while(reading!='&')
					{
						reading=KPD_u8GetPressed();
    312a:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    312e:	80 93 60 01 	sts	0x0160, r24
						if(reading=='&')break;
    3132:	80 91 60 01 	lds	r24, 0x0160
    3136:	86 32       	cpi	r24, 0x26	; 38
    3138:	09 f4       	brne	.+2      	; 0x313c <Stepper_Motor+0x538>
    313a:	f3 c2       	rjmp	.+1510   	; 0x3722 <Stepper_Motor+0xb1e>

							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_LOW);
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	62 e0       	ldi	r22, 0x02	; 2
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_HIGH);
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	63 e0       	ldi	r22, 0x03	; 3
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_HIGH);
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	64 e0       	ldi	r22, 0x04	; 4
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	65 e0       	ldi	r22, 0x05	; 5
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    3164:	fe 01       	movw	r30, r28
    3166:	e3 59       	subi	r30, 0x93	; 147
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e2       	ldi	r26, 0x20	; 32
    3170:	b1 e4       	ldi	r27, 0x41	; 65
    3172:	80 83       	st	Z, r24
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	a2 83       	std	Z+2, r26	; 0x02
    3178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	8e 01       	movw	r16, r28
    317c:	07 59       	subi	r16, 0x97	; 151
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	e3 59       	subi	r30, 0x93	; 147
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a ef       	ldi	r20, 0xFA	; 250
    3194:	54 e4       	ldi	r21, 0x44	; 68
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	f8 01       	movw	r30, r16
    31a0:	80 83       	st	Z, r24
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	a2 83       	std	Z+2, r26	; 0x02
    31a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a8:	fe 01       	movw	r30, r28
    31aa:	e7 59       	subi	r30, 0x97	; 151
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	5f e3       	ldi	r21, 0x3F	; 63
    31be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c2:	88 23       	and	r24, r24
    31c4:	44 f4       	brge	.+16     	; 0x31d6 <Stepper_Motor+0x5d2>
		__ticks = 1;
    31c6:	fe 01       	movw	r30, r28
    31c8:	e9 59       	subi	r30, 0x99	; 153
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
    31d4:	64 c0       	rjmp	.+200    	; 0x329e <Stepper_Motor+0x69a>
	else if (__tmp > 65535)
    31d6:	fe 01       	movw	r30, r28
    31d8:	e7 59       	subi	r30, 0x97	; 151
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	57 e4       	ldi	r21, 0x47	; 71
    31ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	0c f0       	brlt	.+2      	; 0x31f6 <Stepper_Motor+0x5f2>
    31f4:	43 c0       	rjmp	.+134    	; 0x327c <Stepper_Motor+0x678>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f6:	fe 01       	movw	r30, r28
    31f8:	e3 59       	subi	r30, 0x93	; 147
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	8e 01       	movw	r16, r28
    3216:	09 59       	subi	r16, 0x99	; 153
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	f8 01       	movw	r30, r16
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	1f c0       	rjmp	.+62     	; 0x326c <Stepper_Motor+0x668>
    322e:	fe 01       	movw	r30, r28
    3230:	eb 59       	subi	r30, 0x9B	; 155
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	88 ec       	ldi	r24, 0xC8	; 200
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
    323c:	fe 01       	movw	r30, r28
    323e:	eb 59       	subi	r30, 0x9B	; 155
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <Stepper_Motor+0x642>
    324a:	fe 01       	movw	r30, r28
    324c:	eb 59       	subi	r30, 0x9B	; 155
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3254:	de 01       	movw	r26, r28
    3256:	a9 59       	subi	r26, 0x99	; 153
    3258:	bf 4f       	sbci	r27, 0xFF	; 255
    325a:	fe 01       	movw	r30, r28
    325c:	e9 59       	subi	r30, 0x99	; 153
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 81       	ld	r24, Z
    3262:	91 81       	ldd	r25, Z+1	; 0x01
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	11 96       	adiw	r26, 0x01	; 1
    3268:	9c 93       	st	X, r25
    326a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	fe 01       	movw	r30, r28
    326e:	e9 59       	subi	r30, 0x99	; 153
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	d1 f6       	brne	.-76     	; 0x322e <Stepper_Motor+0x62a>
    327a:	27 c0       	rjmp	.+78     	; 0x32ca <Stepper_Motor+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327c:	8e 01       	movw	r16, r28
    327e:	09 59       	subi	r16, 0x99	; 153
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	fe 01       	movw	r30, r28
    3284:	e7 59       	subi	r30, 0x97	; 151
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	f8 01       	movw	r30, r16
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	de 01       	movw	r26, r28
    32a0:	ad 59       	subi	r26, 0x9D	; 157
    32a2:	bf 4f       	sbci	r27, 0xFF	; 255
    32a4:	fe 01       	movw	r30, r28
    32a6:	e9 59       	subi	r30, 0x99	; 153
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	8d 93       	st	X+, r24
    32b0:	9c 93       	st	X, r25
    32b2:	fe 01       	movw	r30, r28
    32b4:	ed 59       	subi	r30, 0x9D	; 157
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <Stepper_Motor+0x6b8>
    32c0:	fe 01       	movw	r30, r28
    32c2:	ed 59       	subi	r30, 0x9D	; 157
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
							_delay_ms(10);

							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_HIGH);
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	62 e0       	ldi	r22, 0x02	; 2
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_HIGH);
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	63 e0       	ldi	r22, 0x03	; 3
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	64 e0       	ldi	r22, 0x04	; 4
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
    32e8:	83 e0       	ldi	r24, 0x03	; 3
    32ea:	65 e0       	ldi	r22, 0x05	; 5
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    32f2:	fe 01       	movw	r30, r28
    32f4:	e1 5a       	subi	r30, 0xA1	; 161
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	a0 e2       	ldi	r26, 0x20	; 32
    32fe:	b1 e4       	ldi	r27, 0x41	; 65
    3300:	80 83       	st	Z, r24
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	a2 83       	std	Z+2, r26	; 0x02
    3306:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3308:	8e 01       	movw	r16, r28
    330a:	05 5a       	subi	r16, 0xA5	; 165
    330c:	1f 4f       	sbci	r17, 0xFF	; 255
    330e:	fe 01       	movw	r30, r28
    3310:	e1 5a       	subi	r30, 0xA1	; 161
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a ef       	ldi	r20, 0xFA	; 250
    3322:	54 e4       	ldi	r21, 0x44	; 68
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	f8 01       	movw	r30, r16
    332e:	80 83       	st	Z, r24
    3330:	91 83       	std	Z+1, r25	; 0x01
    3332:	a2 83       	std	Z+2, r26	; 0x02
    3334:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3336:	fe 01       	movw	r30, r28
    3338:	e5 5a       	subi	r30, 0xA5	; 165
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e8       	ldi	r20, 0x80	; 128
    334a:	5f e3       	ldi	r21, 0x3F	; 63
    334c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3350:	88 23       	and	r24, r24
    3352:	44 f4       	brge	.+16     	; 0x3364 <Stepper_Motor+0x760>
		__ticks = 1;
    3354:	fe 01       	movw	r30, r28
    3356:	e7 5a       	subi	r30, 0xA7	; 167
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	64 c0       	rjmp	.+200    	; 0x342c <Stepper_Motor+0x828>
	else if (__tmp > 65535)
    3364:	fe 01       	movw	r30, r28
    3366:	e5 5a       	subi	r30, 0xA5	; 165
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	3f ef       	ldi	r19, 0xFF	; 255
    3376:	4f e7       	ldi	r20, 0x7F	; 127
    3378:	57 e4       	ldi	r21, 0x47	; 71
    337a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    337e:	18 16       	cp	r1, r24
    3380:	0c f0       	brlt	.+2      	; 0x3384 <Stepper_Motor+0x780>
    3382:	43 c0       	rjmp	.+134    	; 0x340a <Stepper_Motor+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3384:	fe 01       	movw	r30, r28
    3386:	e1 5a       	subi	r30, 0xA1	; 161
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8e 01       	movw	r16, r28
    33a4:	07 5a       	subi	r16, 0xA7	; 167
    33a6:	1f 4f       	sbci	r17, 0xFF	; 255
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	f8 01       	movw	r30, r16
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
    33ba:	1f c0       	rjmp	.+62     	; 0x33fa <Stepper_Motor+0x7f6>
    33bc:	fe 01       	movw	r30, r28
    33be:	e9 5a       	subi	r30, 0xA9	; 169
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	80 83       	st	Z, r24
    33ca:	fe 01       	movw	r30, r28
    33cc:	e9 5a       	subi	r30, 0xA9	; 169
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <Stepper_Motor+0x7d0>
    33d8:	fe 01       	movw	r30, r28
    33da:	e9 5a       	subi	r30, 0xA9	; 169
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e2:	de 01       	movw	r26, r28
    33e4:	a7 5a       	subi	r26, 0xA7	; 167
    33e6:	bf 4f       	sbci	r27, 0xFF	; 255
    33e8:	fe 01       	movw	r30, r28
    33ea:	e7 5a       	subi	r30, 0xA7	; 167
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	91 81       	ldd	r25, Z+1	; 0x01
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	11 96       	adiw	r26, 0x01	; 1
    33f6:	9c 93       	st	X, r25
    33f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fa:	fe 01       	movw	r30, r28
    33fc:	e7 5a       	subi	r30, 0xA7	; 167
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	d1 f6       	brne	.-76     	; 0x33bc <Stepper_Motor+0x7b8>
    3408:	27 c0       	rjmp	.+78     	; 0x3458 <Stepper_Motor+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340a:	8e 01       	movw	r16, r28
    340c:	07 5a       	subi	r16, 0xA7	; 167
    340e:	1f 4f       	sbci	r17, 0xFF	; 255
    3410:	fe 01       	movw	r30, r28
    3412:	e5 5a       	subi	r30, 0xA5	; 165
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	f8 01       	movw	r30, r16
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
    342c:	de 01       	movw	r26, r28
    342e:	ab 5a       	subi	r26, 0xAB	; 171
    3430:	bf 4f       	sbci	r27, 0xFF	; 255
    3432:	fe 01       	movw	r30, r28
    3434:	e7 5a       	subi	r30, 0xA7	; 167
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	8d 93       	st	X+, r24
    343e:	9c 93       	st	X, r25
    3440:	fe 01       	movw	r30, r28
    3442:	eb 5a       	subi	r30, 0xAB	; 171
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <Stepper_Motor+0x846>
    344e:	fe 01       	movw	r30, r28
    3450:	eb 5a       	subi	r30, 0xAB	; 171
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
							_delay_ms(10);

							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_HIGH);
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	62 e0       	ldi	r22, 0x02	; 2
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_LOW);
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	63 e0       	ldi	r22, 0x03	; 3
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
    346c:	83 e0       	ldi	r24, 0x03	; 3
    346e:	64 e0       	ldi	r22, 0x04	; 4
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_HIGH);
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	65 e0       	ldi	r22, 0x05	; 5
    347a:	41 e0       	ldi	r20, 0x01	; 1
    347c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    3480:	fe 01       	movw	r30, r28
    3482:	ef 5a       	subi	r30, 0xAF	; 175
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	a0 e2       	ldi	r26, 0x20	; 32
    348c:	b1 e4       	ldi	r27, 0x41	; 65
    348e:	80 83       	st	Z, r24
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	a2 83       	std	Z+2, r26	; 0x02
    3494:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3496:	8e 01       	movw	r16, r28
    3498:	03 5b       	subi	r16, 0xB3	; 179
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	ef 5a       	subi	r30, 0xAF	; 175
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	4a ef       	ldi	r20, 0xFA	; 250
    34b0:	54 e4       	ldi	r21, 0x44	; 68
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	f8 01       	movw	r30, r16
    34bc:	80 83       	st	Z, r24
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	a2 83       	std	Z+2, r26	; 0x02
    34c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34c4:	fe 01       	movw	r30, r28
    34c6:	e3 5b       	subi	r30, 0xB3	; 179
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	60 81       	ld	r22, Z
    34cc:	71 81       	ldd	r23, Z+1	; 0x01
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	44 f4       	brge	.+16     	; 0x34f2 <Stepper_Motor+0x8ee>
		__ticks = 1;
    34e2:	fe 01       	movw	r30, r28
    34e4:	e5 5b       	subi	r30, 0xB5	; 181
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	80 83       	st	Z, r24
    34f0:	64 c0       	rjmp	.+200    	; 0x35ba <Stepper_Motor+0x9b6>
	else if (__tmp > 65535)
    34f2:	fe 01       	movw	r30, r28
    34f4:	e3 5b       	subi	r30, 0xB3	; 179
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	60 81       	ld	r22, Z
    34fa:	71 81       	ldd	r23, Z+1	; 0x01
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	93 81       	ldd	r25, Z+3	; 0x03
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	0c f0       	brlt	.+2      	; 0x3512 <Stepper_Motor+0x90e>
    3510:	43 c0       	rjmp	.+134    	; 0x3598 <Stepper_Motor+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3512:	fe 01       	movw	r30, r28
    3514:	ef 5a       	subi	r30, 0xAF	; 175
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	60 81       	ld	r22, Z
    351a:	71 81       	ldd	r23, Z+1	; 0x01
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e2       	ldi	r20, 0x20	; 32
    3526:	51 e4       	ldi	r21, 0x41	; 65
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	8e 01       	movw	r16, r28
    3532:	05 5b       	subi	r16, 0xB5	; 181
    3534:	1f 4f       	sbci	r17, 0xFF	; 255
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	f8 01       	movw	r30, r16
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	1f c0       	rjmp	.+62     	; 0x3588 <Stepper_Motor+0x984>
    354a:	fe 01       	movw	r30, r28
    354c:	e7 5b       	subi	r30, 0xB7	; 183
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	88 ec       	ldi	r24, 0xC8	; 200
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	fe 01       	movw	r30, r28
    355a:	e7 5b       	subi	r30, 0xB7	; 183
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <Stepper_Motor+0x95e>
    3566:	fe 01       	movw	r30, r28
    3568:	e7 5b       	subi	r30, 0xB7	; 183
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	de 01       	movw	r26, r28
    3572:	a5 5b       	subi	r26, 0xB5	; 181
    3574:	bf 4f       	sbci	r27, 0xFF	; 255
    3576:	fe 01       	movw	r30, r28
    3578:	e5 5b       	subi	r30, 0xB5	; 181
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	11 96       	adiw	r26, 0x01	; 1
    3584:	9c 93       	st	X, r25
    3586:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	fe 01       	movw	r30, r28
    358a:	e5 5b       	subi	r30, 0xB5	; 181
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	d1 f6       	brne	.-76     	; 0x354a <Stepper_Motor+0x946>
    3596:	27 c0       	rjmp	.+78     	; 0x35e6 <Stepper_Motor+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3598:	8e 01       	movw	r16, r28
    359a:	05 5b       	subi	r16, 0xB5	; 181
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
    359e:	fe 01       	movw	r30, r28
    35a0:	e3 5b       	subi	r30, 0xB3	; 179
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	f8 01       	movw	r30, r16
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    35ba:	de 01       	movw	r26, r28
    35bc:	a9 5b       	subi	r26, 0xB9	; 185
    35be:	bf 4f       	sbci	r27, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 5b       	subi	r30, 0xB5	; 181
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	8d 93       	st	X+, r24
    35cc:	9c 93       	st	X, r25
    35ce:	fe 01       	movw	r30, r28
    35d0:	e9 5b       	subi	r30, 0xB9	; 185
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <Stepper_Motor+0x9d4>
    35dc:	fe 01       	movw	r30, r28
    35de:	e9 5b       	subi	r30, 0xB9	; 185
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	91 83       	std	Z+1, r25	; 0x01
    35e4:	80 83       	st	Z, r24
							_delay_ms(10);

							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_LOW);
    35e6:	83 e0       	ldi	r24, 0x03	; 3
    35e8:	62 e0       	ldi	r22, 0x02	; 2
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_LOW);
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	63 e0       	ldi	r22, 0x03	; 3
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_HIGH);
    35fa:	83 e0       	ldi	r24, 0x03	; 3
    35fc:	64 e0       	ldi	r22, 0x04	; 4
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_HIGH);
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	65 e0       	ldi	r22, 0x05	; 5
    3608:	41 e0       	ldi	r20, 0x01	; 1
    360a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    360e:	fe 01       	movw	r30, r28
    3610:	ed 5b       	subi	r30, 0xBD	; 189
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	a0 e2       	ldi	r26, 0x20	; 32
    361a:	b1 e4       	ldi	r27, 0x41	; 65
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	a2 83       	std	Z+2, r26	; 0x02
    3622:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3624:	8e 01       	movw	r16, r28
    3626:	01 5c       	subi	r16, 0xC1	; 193
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	fe 01       	movw	r30, r28
    362c:	ed 5b       	subi	r30, 0xBD	; 189
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4a ef       	ldi	r20, 0xFA	; 250
    363e:	54 e4       	ldi	r21, 0x44	; 68
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	f8 01       	movw	r30, r16
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3652:	fe 01       	movw	r30, r28
    3654:	ff 96       	adiw	r30, 0x3f	; 63
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e8       	ldi	r20, 0x80	; 128
    3664:	5f e3       	ldi	r21, 0x3F	; 63
    3666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366a:	88 23       	and	r24, r24
    366c:	2c f4       	brge	.+10     	; 0x3678 <Stepper_Motor+0xa74>
		__ticks = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9e af       	std	Y+62, r25	; 0x3e
    3674:	8d af       	std	Y+61, r24	; 0x3d
    3676:	46 c0       	rjmp	.+140    	; 0x3704 <Stepper_Motor+0xb00>
	else if (__tmp > 65535)
    3678:	fe 01       	movw	r30, r28
    367a:	ff 96       	adiw	r30, 0x3f	; 63
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	3f ef       	ldi	r19, 0xFF	; 255
    3688:	4f e7       	ldi	r20, 0x7F	; 127
    368a:	57 e4       	ldi	r21, 0x47	; 71
    368c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3690:	18 16       	cp	r1, r24
    3692:	64 f5       	brge	.+88     	; 0x36ec <Stepper_Motor+0xae8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3694:	fe 01       	movw	r30, r28
    3696:	ed 5b       	subi	r30, 0xBD	; 189
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e2       	ldi	r20, 0x20	; 32
    36a8:	51 e4       	ldi	r21, 0x41	; 65
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	9e af       	std	Y+62, r25	; 0x3e
    36c0:	8d af       	std	Y+61, r24	; 0x3d
    36c2:	0f c0       	rjmp	.+30     	; 0x36e2 <Stepper_Motor+0xade>
    36c4:	88 ec       	ldi	r24, 0xC8	; 200
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	9c af       	std	Y+60, r25	; 0x3c
    36ca:	8b af       	std	Y+59, r24	; 0x3b
    36cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    36ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <Stepper_Motor+0xacc>
    36d4:	9c af       	std	Y+60, r25	; 0x3c
    36d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36da:	9e ad       	ldd	r25, Y+62	; 0x3e
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	9e af       	std	Y+62, r25	; 0x3e
    36e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36e6:	00 97       	sbiw	r24, 0x00	; 0
    36e8:	69 f7       	brne	.-38     	; 0x36c4 <Stepper_Motor+0xac0>
    36ea:	16 c0       	rjmp	.+44     	; 0x3718 <Stepper_Motor+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ec:	fe 01       	movw	r30, r28
    36ee:	ff 96       	adiw	r30, 0x3f	; 63
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9e af       	std	Y+62, r25	; 0x3e
    3702:	8d af       	std	Y+61, r24	; 0x3d
    3704:	8d ad       	ldd	r24, Y+61	; 0x3d
    3706:	9e ad       	ldd	r25, Y+62	; 0x3e
    3708:	9a af       	std	Y+58, r25	; 0x3a
    370a:	89 af       	std	Y+57, r24	; 0x39
    370c:	89 ad       	ldd	r24, Y+57	; 0x39
    370e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <Stepper_Motor+0xb0c>
    3714:	9a af       	std	Y+58, r25	; 0x3a
    3716:	89 af       	std	Y+57, r24	; 0x39
				case 1:
					CLCD_voidSendString("Rotate CW");
					CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
					CLCD_voidSendString("Press c to back");

					while(reading!='&')
    3718:	80 91 60 01 	lds	r24, 0x0160
    371c:	86 32       	cpi	r24, 0x26	; 38
    371e:	09 f0       	breq	.+2      	; 0x3722 <Stepper_Motor+0xb1e>
    3720:	04 cd       	rjmp	.-1528   	; 0x312a <Stepper_Motor+0x526>
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_HIGH);
							DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_HIGH);
							_delay_ms(10);

				}
						 flag=1;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	80 93 61 01 	sts	0x0161, r24
    3728:	3b c2       	rjmp	.+1142   	; 0x3ba0 <Stepper_Motor+0xf9c>
						 break;

				case 2:

					CLCD_voidSendString("Rotate ACW");
    372a:	8d ee       	ldi	r24, 0xED	; 237
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
					CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
    3732:	82 e0       	ldi	r24, 0x02	; 2
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSetPosition>
					CLCD_voidSendString("Press c to back");
    373a:	8d ed       	ldi	r24, 0xDD	; 221
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendString>
    3742:	21 c2       	rjmp	.+1090   	; 0x3b86 <Stepper_Motor+0xf82>

					while(reading!='&')
					{
						reading=KPD_u8GetPressed();
    3744:	0e 94 4a 12 	call	0x2494	; 0x2494 <KPD_u8GetPressed>
    3748:	80 93 60 01 	sts	0x0160, r24
								if(reading=='&')break;
    374c:	80 91 60 01 	lds	r24, 0x0160
    3750:	86 32       	cpi	r24, 0x26	; 38
    3752:	09 f4       	brne	.+2      	; 0x3756 <Stepper_Motor+0xb52>
    3754:	1d c2       	rjmp	.+1082   	; 0x3b90 <Stepper_Motor+0xf8c>

									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_LOW);
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	62 e0       	ldi	r22, 0x02	; 2
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_HIGH);
    3760:	83 e0       	ldi	r24, 0x03	; 3
    3762:	63 e0       	ldi	r22, 0x03	; 3
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_HIGH);
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	64 e0       	ldi	r22, 0x04	; 4
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	65 e0       	ldi	r22, 0x05	; 5
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	a0 e2       	ldi	r26, 0x20	; 32
    3784:	b1 e4       	ldi	r27, 0x41	; 65
    3786:	8d ab       	std	Y+53, r24	; 0x35
    3788:	9e ab       	std	Y+54, r25	; 0x36
    378a:	af ab       	std	Y+55, r26	; 0x37
    378c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378e:	6d a9       	ldd	r22, Y+53	; 0x35
    3790:	7e a9       	ldd	r23, Y+54	; 0x36
    3792:	8f a9       	ldd	r24, Y+55	; 0x37
    3794:	98 ad       	ldd	r25, Y+56	; 0x38
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	4a ef       	ldi	r20, 0xFA	; 250
    379c:	54 e4       	ldi	r21, 0x44	; 68
    379e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	89 ab       	std	Y+49, r24	; 0x31
    37a8:	9a ab       	std	Y+50, r25	; 0x32
    37aa:	ab ab       	std	Y+51, r26	; 0x33
    37ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37ae:	69 a9       	ldd	r22, Y+49	; 0x31
    37b0:	7a a9       	ldd	r23, Y+50	; 0x32
    37b2:	8b a9       	ldd	r24, Y+51	; 0x33
    37b4:	9c a9       	ldd	r25, Y+52	; 0x34
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e8       	ldi	r20, 0x80	; 128
    37bc:	5f e3       	ldi	r21, 0x3F	; 63
    37be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c2:	88 23       	and	r24, r24
    37c4:	2c f4       	brge	.+10     	; 0x37d0 <Stepper_Motor+0xbcc>
		__ticks = 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	98 ab       	std	Y+48, r25	; 0x30
    37cc:	8f a7       	std	Y+47, r24	; 0x2f
    37ce:	3f c0       	rjmp	.+126    	; 0x384e <Stepper_Motor+0xc4a>
	else if (__tmp > 65535)
    37d0:	69 a9       	ldd	r22, Y+49	; 0x31
    37d2:	7a a9       	ldd	r23, Y+50	; 0x32
    37d4:	8b a9       	ldd	r24, Y+51	; 0x33
    37d6:	9c a9       	ldd	r25, Y+52	; 0x34
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	3f ef       	ldi	r19, 0xFF	; 255
    37dc:	4f e7       	ldi	r20, 0x7F	; 127
    37de:	57 e4       	ldi	r21, 0x47	; 71
    37e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e4:	18 16       	cp	r1, r24
    37e6:	4c f5       	brge	.+82     	; 0x383a <Stepper_Motor+0xc36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e8:	6d a9       	ldd	r22, Y+53	; 0x35
    37ea:	7e a9       	ldd	r23, Y+54	; 0x36
    37ec:	8f a9       	ldd	r24, Y+55	; 0x37
    37ee:	98 ad       	ldd	r25, Y+56	; 0x38
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	51 e4       	ldi	r21, 0x41	; 65
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	98 ab       	std	Y+48, r25	; 0x30
    380e:	8f a7       	std	Y+47, r24	; 0x2f
    3810:	0f c0       	rjmp	.+30     	; 0x3830 <Stepper_Motor+0xc2c>
    3812:	88 ec       	ldi	r24, 0xC8	; 200
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	9e a7       	std	Y+46, r25	; 0x2e
    3818:	8d a7       	std	Y+45, r24	; 0x2d
    381a:	8d a5       	ldd	r24, Y+45	; 0x2d
    381c:	9e a5       	ldd	r25, Y+46	; 0x2e
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <Stepper_Motor+0xc1a>
    3822:	9e a7       	std	Y+46, r25	; 0x2e
    3824:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3826:	8f a5       	ldd	r24, Y+47	; 0x2f
    3828:	98 a9       	ldd	r25, Y+48	; 0x30
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	98 ab       	std	Y+48, r25	; 0x30
    382e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3830:	8f a5       	ldd	r24, Y+47	; 0x2f
    3832:	98 a9       	ldd	r25, Y+48	; 0x30
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	69 f7       	brne	.-38     	; 0x3812 <Stepper_Motor+0xc0e>
    3838:	14 c0       	rjmp	.+40     	; 0x3862 <Stepper_Motor+0xc5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383a:	69 a9       	ldd	r22, Y+49	; 0x31
    383c:	7a a9       	ldd	r23, Y+50	; 0x32
    383e:	8b a9       	ldd	r24, Y+51	; 0x33
    3840:	9c a9       	ldd	r25, Y+52	; 0x34
    3842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
    384e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3850:	98 a9       	ldd	r25, Y+48	; 0x30
    3852:	9c a7       	std	Y+44, r25	; 0x2c
    3854:	8b a7       	std	Y+43, r24	; 0x2b
    3856:	8b a5       	ldd	r24, Y+43	; 0x2b
    3858:	9c a5       	ldd	r25, Y+44	; 0x2c
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <Stepper_Motor+0xc56>
    385e:	9c a7       	std	Y+44, r25	; 0x2c
    3860:	8b a7       	std	Y+43, r24	; 0x2b
									_delay_ms(10);

									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_LOW);
    3862:	83 e0       	ldi	r24, 0x03	; 3
    3864:	62 e0       	ldi	r22, 0x02	; 2
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_LOW);
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	63 e0       	ldi	r22, 0x03	; 3
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_HIGH);
    3876:	83 e0       	ldi	r24, 0x03	; 3
    3878:	64 e0       	ldi	r22, 0x04	; 4
    387a:	41 e0       	ldi	r20, 0x01	; 1
    387c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_HIGH);
    3880:	83 e0       	ldi	r24, 0x03	; 3
    3882:	65 e0       	ldi	r22, 0x05	; 5
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e2       	ldi	r26, 0x20	; 32
    3890:	b1 e4       	ldi	r27, 0x41	; 65
    3892:	8f a3       	std	Y+39, r24	; 0x27
    3894:	98 a7       	std	Y+40, r25	; 0x28
    3896:	a9 a7       	std	Y+41, r26	; 0x29
    3898:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	6f a1       	ldd	r22, Y+39	; 0x27
    389c:	78 a5       	ldd	r23, Y+40	; 0x28
    389e:	89 a5       	ldd	r24, Y+41	; 0x29
    38a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a ef       	ldi	r20, 0xFA	; 250
    38a8:	54 e4       	ldi	r21, 0x44	; 68
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	8b a3       	std	Y+35, r24	; 0x23
    38b4:	9c a3       	std	Y+36, r25	; 0x24
    38b6:	ad a3       	std	Y+37, r26	; 0x25
    38b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38ba:	6b a1       	ldd	r22, Y+35	; 0x23
    38bc:	7c a1       	ldd	r23, Y+36	; 0x24
    38be:	8d a1       	ldd	r24, Y+37	; 0x25
    38c0:	9e a1       	ldd	r25, Y+38	; 0x26
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e8       	ldi	r20, 0x80	; 128
    38c8:	5f e3       	ldi	r21, 0x3F	; 63
    38ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ce:	88 23       	and	r24, r24
    38d0:	2c f4       	brge	.+10     	; 0x38dc <Stepper_Motor+0xcd8>
		__ticks = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9a a3       	std	Y+34, r25	; 0x22
    38d8:	89 a3       	std	Y+33, r24	; 0x21
    38da:	3f c0       	rjmp	.+126    	; 0x395a <Stepper_Motor+0xd56>
	else if (__tmp > 65535)
    38dc:	6b a1       	ldd	r22, Y+35	; 0x23
    38de:	7c a1       	ldd	r23, Y+36	; 0x24
    38e0:	8d a1       	ldd	r24, Y+37	; 0x25
    38e2:	9e a1       	ldd	r25, Y+38	; 0x26
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
    38e8:	4f e7       	ldi	r20, 0x7F	; 127
    38ea:	57 e4       	ldi	r21, 0x47	; 71
    38ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f0:	18 16       	cp	r1, r24
    38f2:	4c f5       	brge	.+82     	; 0x3946 <Stepper_Motor+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	6f a1       	ldd	r22, Y+39	; 0x27
    38f6:	78 a5       	ldd	r23, Y+40	; 0x28
    38f8:	89 a5       	ldd	r24, Y+41	; 0x29
    38fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9a a3       	std	Y+34, r25	; 0x22
    391a:	89 a3       	std	Y+33, r24	; 0x21
    391c:	0f c0       	rjmp	.+30     	; 0x393c <Stepper_Motor+0xd38>
    391e:	88 ec       	ldi	r24, 0xC8	; 200
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	98 a3       	std	Y+32, r25	; 0x20
    3924:	8f 8f       	std	Y+31, r24	; 0x1f
    3926:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3928:	98 a1       	ldd	r25, Y+32	; 0x20
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <Stepper_Motor+0xd26>
    392e:	98 a3       	std	Y+32, r25	; 0x20
    3930:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	89 a1       	ldd	r24, Y+33	; 0x21
    3934:	9a a1       	ldd	r25, Y+34	; 0x22
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	9a a3       	std	Y+34, r25	; 0x22
    393a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393c:	89 a1       	ldd	r24, Y+33	; 0x21
    393e:	9a a1       	ldd	r25, Y+34	; 0x22
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	69 f7       	brne	.-38     	; 0x391e <Stepper_Motor+0xd1a>
    3944:	14 c0       	rjmp	.+40     	; 0x396e <Stepper_Motor+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	6b a1       	ldd	r22, Y+35	; 0x23
    3948:	7c a1       	ldd	r23, Y+36	; 0x24
    394a:	8d a1       	ldd	r24, Y+37	; 0x25
    394c:	9e a1       	ldd	r25, Y+38	; 0x26
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9a a3       	std	Y+34, r25	; 0x22
    3958:	89 a3       	std	Y+33, r24	; 0x21
    395a:	89 a1       	ldd	r24, Y+33	; 0x21
    395c:	9a a1       	ldd	r25, Y+34	; 0x22
    395e:	9e 8f       	std	Y+30, r25	; 0x1e
    3960:	8d 8f       	std	Y+29, r24	; 0x1d
    3962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <Stepper_Motor+0xd62>
    396a:	9e 8f       	std	Y+30, r25	; 0x1e
    396c:	8d 8f       	std	Y+29, r24	; 0x1d
									_delay_ms(10);

									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_HIGH);
    396e:	83 e0       	ldi	r24, 0x03	; 3
    3970:	62 e0       	ldi	r22, 0x02	; 2
    3972:	41 e0       	ldi	r20, 0x01	; 1
    3974:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_LOW);
    3978:	83 e0       	ldi	r24, 0x03	; 3
    397a:	63 e0       	ldi	r22, 0x03	; 3
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
    3982:	83 e0       	ldi	r24, 0x03	; 3
    3984:	64 e0       	ldi	r22, 0x04	; 4
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_HIGH);
    398c:	83 e0       	ldi	r24, 0x03	; 3
    398e:	65 e0       	ldi	r22, 0x05	; 5
    3990:	41 e0       	ldi	r20, 0x01	; 1
    3992:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e2       	ldi	r26, 0x20	; 32
    399c:	b1 e4       	ldi	r27, 0x41	; 65
    399e:	89 8f       	std	Y+25, r24	; 0x19
    39a0:	9a 8f       	std	Y+26, r25	; 0x1a
    39a2:	ab 8f       	std	Y+27, r26	; 0x1b
    39a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	69 8d       	ldd	r22, Y+25	; 0x19
    39a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a ef       	ldi	r20, 0xFA	; 250
    39b4:	54 e4       	ldi	r21, 0x44	; 68
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8d 8b       	std	Y+21, r24	; 0x15
    39c0:	9e 8b       	std	Y+22, r25	; 0x16
    39c2:	af 8b       	std	Y+23, r26	; 0x17
    39c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <Stepper_Motor+0xde4>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9c 8b       	std	Y+20, r25	; 0x14
    39e4:	8b 8b       	std	Y+19, r24	; 0x13
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <Stepper_Motor+0xe62>
	else if (__tmp > 65535)
    39e8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ea:	7e 89       	ldd	r23, Y+22	; 0x16
    39ec:	8f 89       	ldd	r24, Y+23	; 0x17
    39ee:	98 8d       	ldd	r25, Y+24	; 0x18
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <Stepper_Motor+0xe4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	69 8d       	ldd	r22, Y+25	; 0x19
    3a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9c 8b       	std	Y+20, r25	; 0x14
    3a26:	8b 8b       	std	Y+19, r24	; 0x13
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <Stepper_Motor+0xe44>
    3a2a:	88 ec       	ldi	r24, 0xC8	; 200
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9a 8b       	std	Y+18, r25	; 0x12
    3a30:	89 8b       	std	Y+17, r24	; 0x11
    3a32:	89 89       	ldd	r24, Y+17	; 0x11
    3a34:	9a 89       	ldd	r25, Y+18	; 0x12
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <Stepper_Motor+0xe32>
    3a3a:	9a 8b       	std	Y+18, r25	; 0x12
    3a3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a40:	9c 89       	ldd	r25, Y+20	; 0x14
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <Stepper_Motor+0xe26>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <Stepper_Motor+0xe76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	6d 89       	ldd	r22, Y+21	; 0x15
    3a54:	7e 89       	ldd	r23, Y+22	; 0x16
    3a56:	8f 89       	ldd	r24, Y+23	; 0x17
    3a58:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9c 8b       	std	Y+20, r25	; 0x14
    3a64:	8b 8b       	std	Y+19, r24	; 0x13
    3a66:	8b 89       	ldd	r24, Y+19	; 0x13
    3a68:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6a:	98 8b       	std	Y+16, r25	; 0x10
    3a6c:	8f 87       	std	Y+15, r24	; 0x0f
    3a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a70:	98 89       	ldd	r25, Y+16	; 0x10
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <Stepper_Motor+0xe6e>
    3a76:	98 8b       	std	Y+16, r25	; 0x10
    3a78:	8f 87       	std	Y+15, r24	; 0x0f
									_delay_ms(10);



									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,PIN_VAL_HIGH);
    3a7a:	83 e0       	ldi	r24, 0x03	; 3
    3a7c:	62 e0       	ldi	r22, 0x02	; 2
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,PIN_VAL_HIGH);
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	63 e0       	ldi	r22, 0x03	; 3
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
    3a8e:	83 e0       	ldi	r24, 0x03	; 3
    3a90:	64 e0       	ldi	r22, 0x04	; 4
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
    3a98:	83 e0       	ldi	r24, 0x03	; 3
    3a9a:	65 e0       	ldi	r22, 0x05	; 5
    3a9c:	40 e0       	ldi	r20, 0x00	; 0
    3a9e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DIO_voidSetPinValue>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	a0 e2       	ldi	r26, 0x20	; 32
    3aa8:	b1 e4       	ldi	r27, 0x41	; 65
    3aaa:	8b 87       	std	Y+11, r24	; 0x0b
    3aac:	9c 87       	std	Y+12, r25	; 0x0c
    3aae:	ad 87       	std	Y+13, r26	; 0x0d
    3ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	4a ef       	ldi	r20, 0xFA	; 250
    3ac0:	54 e4       	ldi	r21, 0x44	; 68
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	8f 83       	std	Y+7, r24	; 0x07
    3acc:	98 87       	std	Y+8, r25	; 0x08
    3ace:	a9 87       	std	Y+9, r26	; 0x09
    3ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5f e3       	ldi	r21, 0x3F	; 63
    3ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	2c f4       	brge	.+10     	; 0x3af4 <Stepper_Motor+0xef0>
		__ticks = 1;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	3f c0       	rjmp	.+126    	; 0x3b72 <Stepper_Motor+0xf6e>
	else if (__tmp > 65535)
    3af4:	6f 81       	ldd	r22, Y+7	; 0x07
    3af6:	78 85       	ldd	r23, Y+8	; 0x08
    3af8:	89 85       	ldd	r24, Y+9	; 0x09
    3afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	4c f5       	brge	.+82     	; 0x3b5e <Stepper_Motor+0xf5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <Stepper_Motor+0xf50>
    3b36:	88 ec       	ldi	r24, 0xC8	; 200
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9c 83       	std	Y+4, r25	; 0x04
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	9c 81       	ldd	r25, Y+4	; 0x04
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <Stepper_Motor+0xf3e>
    3b46:	9c 83       	std	Y+4, r25	; 0x04
    3b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b54:	8d 81       	ldd	r24, Y+5	; 0x05
    3b56:	9e 81       	ldd	r25, Y+6	; 0x06
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	69 f7       	brne	.-38     	; 0x3b36 <Stepper_Motor+0xf32>
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <Stepper_Motor+0xf82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <Stepper_Motor+0xf7a>
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01

					CLCD_voidSendString("Rotate ACW");
					CLCD_voidSetPosition(CLCD_ROW_2,(CLCD_COL_1)-1);
					CLCD_voidSendString("Press c to back");

					while(reading!='&')
    3b86:	80 91 60 01 	lds	r24, 0x0160
    3b8a:	86 32       	cpi	r24, 0x26	; 38
    3b8c:	09 f0       	breq	.+2      	; 0x3b90 <Stepper_Motor+0xf8c>
    3b8e:	da cd       	rjmp	.-1100   	; 0x3744 <Stepper_Motor+0xb40>
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,PIN_VAL_LOW);
									DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,PIN_VAL_LOW);
									_delay_ms(10);

					}
								 flag=1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	80 93 61 01 	sts	0x0161, r24
    3b96:	04 c0       	rjmp	.+8      	; 0x3ba0 <Stepper_Motor+0xf9c>
								 break;

				case 3:
								CLCD_voidClearScreen();
    3b98:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidClearScreen>
								flag=0;
    3b9c:	10 92 61 01 	sts	0x0161, r1
								break;

					}


			}while(reading=='\0');
    3ba0:	80 91 60 01 	lds	r24, 0x0160
    3ba4:	88 23       	and	r24, r24
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <Stepper_Motor+0xfa6>
    3ba8:	87 ca       	rjmp	.-2802   	; 0x30b8 <Stepper_Motor+0x4b4>



void Stepper_Motor(void)
{
	while(flag==1)
    3baa:	80 91 61 01 	lds	r24, 0x0161
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	11 f4       	brne	.+4      	; 0x3bb6 <Stepper_Motor+0xfb2>
    3bb2:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <Stepper_Motor+0x1e>


			}while(reading=='\0');

	}
}
    3bb6:	c4 56       	subi	r28, 0x64	; 100
    3bb8:	df 4f       	sbci	r29, 0xFF	; 255
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	08 95       	ret

00003bce <__udivmodhi4>:
    3bce:	aa 1b       	sub	r26, r26
    3bd0:	bb 1b       	sub	r27, r27
    3bd2:	51 e1       	ldi	r21, 0x11	; 17
    3bd4:	07 c0       	rjmp	.+14     	; 0x3be4 <__udivmodhi4_ep>

00003bd6 <__udivmodhi4_loop>:
    3bd6:	aa 1f       	adc	r26, r26
    3bd8:	bb 1f       	adc	r27, r27
    3bda:	a6 17       	cp	r26, r22
    3bdc:	b7 07       	cpc	r27, r23
    3bde:	10 f0       	brcs	.+4      	; 0x3be4 <__udivmodhi4_ep>
    3be0:	a6 1b       	sub	r26, r22
    3be2:	b7 0b       	sbc	r27, r23

00003be4 <__udivmodhi4_ep>:
    3be4:	88 1f       	adc	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	5a 95       	dec	r21
    3bea:	a9 f7       	brne	.-22     	; 0x3bd6 <__udivmodhi4_loop>
    3bec:	80 95       	com	r24
    3bee:	90 95       	com	r25
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	08 95       	ret

00003bf6 <__prologue_saves__>:
    3bf6:	2f 92       	push	r2
    3bf8:	3f 92       	push	r3
    3bfa:	4f 92       	push	r4
    3bfc:	5f 92       	push	r5
    3bfe:	6f 92       	push	r6
    3c00:	7f 92       	push	r7
    3c02:	8f 92       	push	r8
    3c04:	9f 92       	push	r9
    3c06:	af 92       	push	r10
    3c08:	bf 92       	push	r11
    3c0a:	cf 92       	push	r12
    3c0c:	df 92       	push	r13
    3c0e:	ef 92       	push	r14
    3c10:	ff 92       	push	r15
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	ca 1b       	sub	r28, r26
    3c20:	db 0b       	sbc	r29, r27
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	09 94       	ijmp

00003c2e <__epilogue_restores__>:
    3c2e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c30:	39 88       	ldd	r3, Y+17	; 0x11
    3c32:	48 88       	ldd	r4, Y+16	; 0x10
    3c34:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c36:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c38:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c40:	b9 84       	ldd	r11, Y+9	; 0x09
    3c42:	c8 84       	ldd	r12, Y+8	; 0x08
    3c44:	df 80       	ldd	r13, Y+7	; 0x07
    3c46:	ee 80       	ldd	r14, Y+6	; 0x06
    3c48:	fd 80       	ldd	r15, Y+5	; 0x05
    3c4a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c4c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c50:	b9 81       	ldd	r27, Y+1	; 0x01
    3c52:	ce 0f       	add	r28, r30
    3c54:	d1 1d       	adc	r29, r1
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	ed 01       	movw	r28, r26
    3c62:	08 95       	ret

00003c64 <_exit>:
    3c64:	f8 94       	cli

00003c66 <__stop_program>:
    3c66:	ff cf       	rjmp	.-2      	; 0x3c66 <__stop_program>
